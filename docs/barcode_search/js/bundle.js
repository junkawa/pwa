/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/js/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/js/BarcodeReader.js":
/*!*********************************!*\
  !*** ./src/js/BarcodeReader.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/**\n * CallBacks:\n * __________________________________________________________________________________\n * All the callback function should have one parameter:\n * function(result){};\n * And the result parameter will contain an array of objects that look like BarcodeReader.\n * result = [{Format: the barcode type, Value: the value of the barcode}];\n * __________________________________________________________________________________\n *\n * You can use either the set functions or just access the properties directly to set callback or\n * other properties. Just always remember to call Init() before starting to decode something never mess\n * around with the SupportedFormats property.\n *\n */\n\nvar EXIF = __webpack_require__(/*! ./exif */ \"./src/js/exif.js\");\nvar decoderWorkerBlobString = __webpack_require__(/*! ./DecoderWorker */ \"./src/js/DecoderWorker.js\");\n\nvar BarcodeReader = {\n  Config: {\n    // Set to false if the decoder should look for one barcode and then stop. Increases performance.\n    Multiple: true,\n\n    // The formats that the decoder will look for.\n    DecodeFormats: [\"Code128\", \"Code93\", \"Code39\", \"EAN-13\", \"2Of5\", \"Inter2Of5\", \"Codabar\"],\n\n    // ForceUnique just must makes sure that the callback function isn't repeatedly called\n    // with the same barcode. Especially in the case of a video stream.\n    ForceUnique: true,\n\n    // Set to true if information about the localization should be recieved from the worker.\n    LocalizationFeedback: false,\n\n    // Set to true if checking orientation of the image should be skipped.\n    // Checking orientation takes a bit of time for larger images, so if\n    // you are sure that the image orientation is 1 you should skip it.\n    SkipOrientation: false\n  },\n  SupportedFormats: [\"Code128\", \"Code93\", \"Code39\", \"EAN-13\", \"2Of5\", \"Inter2Of5\", \"Codabar\"], // Don't touch.\n  ScanCanvas: null, // Don't touch the canvas either.\n  ScanContext: null,\n  SquashCanvas: document.createElement(\"canvas\"),\n  ImageCallback: null, // Callback for the decoding of an image.\n  StreamCallback: null, // Callback for the decoding of a video.\n  LocalizationCallback: null, // Callback for localization.\n  ImageErrorCallback: null, // Callback for error on image loading.\n  Stream: null, // The actual video.\n  DecodeStreamActive: false, // Will be set to false when StopStreamDecode() is called.\n  Decoded: [], // Used to enfore the ForceUnique property.\n  DecoderWorker: new Worker( URL.createObjectURL(new Blob([decoderWorkerBlobString], {type: \"application/javascript\"}) ) ),\n  OrientationCallback: null,\n  // Always call the Init().\n  Init: function() {\n    BarcodeReader.ScanCanvas = BarcodeReader.FixCanvas(document.createElement(\"canvas\"));\n    BarcodeReader.ScanCanvas.width = 640;\n    BarcodeReader.ScanCanvas.height = 480;\n    BarcodeReader.ScanContext = BarcodeReader.ScanCanvas.getContext(\"2d\");\n  },\n\n  // Value should be true or false.\n  SetRotationSkip: function(value) {\n    BarcodeReader.Config.SkipOrientation = value;\n  },\n  // Sets the callback function for the image decoding.\n  SetImageCallback: function(callBack) {\n    BarcodeReader.ImageCallback = callBack;\n  },\n\n  // Sets the callback function for the video decoding.\n  SetStreamCallback: function(callBack) {\n    BarcodeReader.StreamCallback = callBack;\n  },\n\n  // Sets callback for localization, the callback function should take one argument.\n  // This will be an array with objects with format.\n  // {x, y, width, height}\n  // This represents a localization rectangle.\n  // The rectangle comes from a 320, 240 area i.e the search canvas.\n  SetLocalizationCallback: function(callBack) {\n    BarcodeReader.LocalizationCallback = callBack;\n    BarcodeReader.Config.LocalizationFeedback = true;\n  },\n\n  // Sets the callback function when loading a wrong image.\n  SetImageErrorCallback: function(callBack) {\n    BarcodeReader.ImageErrorCallback = callBack;\n  },\n\n  // Set to true if LocalizationCallback is set and you would like to\n  // receive the feedback or false if\n  SwitchLocalizationFeedback: function(bool) {\n    BarcodeReader.Config.LocalizationFeedback = bool;\n  },\n\n  // Switches for changing the Multiple property.\n  DecodeSingleBarcode: function() {\n    BarcodeReader.Config.Multiple = false;\n  },\n  DecodeMultiple: function() {\n    BarcodeReader.Config.Multiple = true;\n  },\n\n  // Sets the formats to decode, formats should be an array of a subset of the supported formats.\n  SetDecodeFormats: function(formats) {\n    BarcodeReader.Config.DecodeFormats = [];\n    for (var i = 0; i < formats.length; i++) {\n      if (BarcodeReader.SupportedFormats.indexOf(formats[i]) !== -1) {\n        BarcodeReader.Config.DecodeFormats.push(formats[i]);\n      }\n    }\n    if (BarcodeReader.Config.DecodeFormats.length === 0) {\n      BarcodeReader.Config.DecodeFormats = BarcodeReader.SupportedFormats.slice();\n    }\n  },\n\n  // Removes a list of formats from the formats to decode.\n  SkipFormats: function(formats) {\n    for (var i = 0; i < formats.length; i++) {\n      var index = BarcodeReader.Config.DecodeFormats.indexOf(formats[i]);\n      if (index >= 0) {\n        BarcodeReader.Config.DecodeFormats.splice(index, 1);\n      }\n    }\n  },\n\n  // Adds a list of formats to the formats to decode.\n  AddFormats: function(formats) {\n    for (var i = 0; i < formats.length; i++) {\n      if (BarcodeReader.SupportedFormats.indexOf(formats[i]) !== -1) {\n        if (BarcodeReader.Config.DecodeFormats.indexOf(formats[i]) === -1) {\n          BarcodeReader.Config.DecodeFormats.push(formats[i]);\n        }\n      }\n    }\n  },\n\n  // The callback function for image decoding used internally by BarcodeReader.\n  BarcodeReaderImageCallback: function(e) {\n    if (e.data.success === \"localization\") {\n      if (BarcodeReader.Config.LocalizationFeedback) {\n        BarcodeReader.LocalizationCallback(e.data.result);\n      }\n      return;\n    }\n    if (e.data.success === \"orientationData\") {\n      BarcodeReader.OrientationCallback(e.data.result);\n      return;\n    }\n    var filteredData = [];\n    for (var i = 0; i < e.data.result.length; i++) {\n      if (BarcodeReader.Decoded.indexOf(e.data.result[i].Value) === -1 || BarcodeReader.Config.ForceUnique === false) {\n        filteredData.push(e.data.result[i]);\n        if (BarcodeReader.Config.ForceUnique) BarcodeReader.Decoded.push(e.data.result[i].Value);\n      }\n    }\n    BarcodeReader.ImageCallback(filteredData);\n    BarcodeReader.Decoded = [];\n  },\n\n  // The callback function for stream decoding used internally by BarcodeReader.\n  BarcodeReaderStreamCallback: function(e) {\n    if (e.data.success === \"localization\") {\n      if (BarcodeReader.Config.LocalizationFeedback) {\n        BarcodeReader.LocalizationCallback(e.data.result);\n      }\n      return;\n    }\n    if (e.data.success && BarcodeReader.DecodeStreamActive) {\n      var filteredData = [];\n      for (var i = 0; i < e.data.result.length; i++) {\n        if (BarcodeReader.Decoded.indexOf(e.data.result[i].Value) === -1 || BarcodeReader.ForceUnique === false) {\n          filteredData.push(e.data.result[i]);\n          if (BarcodeReader.ForceUnique) BarcodeReader.Decoded.push(e.data.result[i].Value);\n        }\n      }\n      if (filteredData.length > 0) {\n        BarcodeReader.StreamCallback(filteredData);\n      }\n    }\n    if (BarcodeReader.DecodeStreamActive) {\n      BarcodeReader.ScanContext.drawImage(BarcodeReader.Stream, 0, 0, BarcodeReader.ScanCanvas.width, BarcodeReader.ScanCanvas.height);\n      BarcodeReader.DecoderWorker.postMessage({\n        scan: BarcodeReader.ScanContext.getImageData(0, 0, BarcodeReader.ScanCanvas.width, BarcodeReader.ScanCanvas.height).data,\n        scanWidth: BarcodeReader.ScanCanvas.width,\n        scanHeight: BarcodeReader.ScanCanvas.height,\n        multiple: BarcodeReader.Config.Multiple,\n        decodeFormats: BarcodeReader.Config.DecodeFormats,\n        cmd: \"normal\",\n        rotation: 1\n      });\n\n    }\n    if (!BarcodeReader.DecodeStreamActive) {\n      BarcodeReader.Decoded = [];\n    }\n  },\n\n  // The image decoding function, image is a data source for an image or an image element.\n  DecodeImage: function(image) {\n\tvar img = new Image();\n\timg.onerror = BarcodeReader.ImageErrorCallback;\n\n    if (image instanceof Image || image instanceof HTMLImageElement) {\n      image.exifdata = false;\n      if (image.complete) {\n        if (BarcodeReader.Config.SkipOrientation) {\n          BarcodeReader.BarcodeReaderDecodeImage(image, 1, \"\");\n        } else {\n          EXIF.getData(image, function(exifImage) {\n            var orientation = EXIF.getTag(exifImage, \"Orientation\");\n            var sceneType = EXIF.getTag(exifImage, \"SceneCaptureType\");\n            if (typeof orientation !== 'number') orientation = 1;\n            BarcodeReader.BarcodeReaderDecodeImage(exifImage, orientation, sceneType);\n          });\n        }\n      } else {\n        img.onload = function() {\n          if (BarcodeReader.Config.SkipOrientation) {\n            BarcodeReader.BarcodeReaderDecodeImage(img, 1, \"\");\n          } else {\n            EXIF.getData(this, function(exifImage) {\n              var orientation = EXIF.getTag(exifImage, \"Orientation\");\n              var sceneType = EXIF.getTag(exifImage, \"SceneCaptureType\");\n              if (typeof orientation !== 'number') orientation = 1;\n              BarcodeReader.BarcodeReaderDecodeImage(exifImage, orientation, sceneType);\n            });\n          }\n        };\n        img.src = image.src;\n      }\n    } else {\n      img.onload = function() {\n        if (BarcodeReader.Config.SkipOrientation) {\n          BarcodeReader.BarcodeReaderDecodeImage(img, 1, \"\");\n        } else {\n          EXIF.getData(this, function(exifImage) {\n            var orientation = EXIF.getTag(exifImage, \"Orientation\");\n            var sceneType = EXIF.getTag(exifImage, \"SceneCaptureType\");\n            if (typeof orientation !== 'number') orientation = 1;\n            BarcodeReader.BarcodeReaderDecodeImage(exifImage, orientation, sceneType);\n          });\n        }\n      };\n      img.src = image;\n    }\n  },\n\n  // Starts the decoding of a stream, the stream is a video not a blob i.e it's an element.\n  DecodeStream: function(stream) {\n    BarcodeReader.Stream = stream;\n    BarcodeReader.DecodeStreamActive = true;\n    BarcodeReader.DecoderWorker.onmessage = BarcodeReader.BarcodeReaderStreamCallback;\n    BarcodeReader.ScanContext.drawImage(stream, 0, 0, BarcodeReader.ScanCanvas.width, BarcodeReader.ScanCanvas.height);\n    BarcodeReader.DecoderWorker.postMessage({\n      scan: BarcodeReader.ScanContext.getImageData(0, 0, BarcodeReader.ScanCanvas.width, BarcodeReader.ScanCanvas.height).data,\n      scanWidth: BarcodeReader.ScanCanvas.width,\n      scanHeight: BarcodeReader.ScanCanvas.height,\n      multiple: BarcodeReader.Config.Multiple,\n      decodeFormats: BarcodeReader.Config.DecodeFormats,\n      cmd: \"normal\",\n      rotation: 1\n    });\n  },\n\n  // Stops the decoding of a stream.\n  StopStreamDecode: function() {\n    BarcodeReader.DecodeStreamActive = false;\n    BarcodeReader.Decoded = [];\n  },\n\n  BarcodeReaderDecodeImage: function(image, orientation, sceneCaptureType) {\n    if (orientation === 8 || orientation === 6) {\n      if (sceneCaptureType === \"Landscape\" && image.width > image.height) {\n        orientation = 1;\n        BarcodeReader.ScanCanvas.width = 640;\n        BarcodeReader.ScanCanvas.height = 480;\n      } else {\n        BarcodeReader.ScanCanvas.width = 480;\n        BarcodeReader.ScanCanvas.height = 640;\n      }\n    } else {\n      BarcodeReader.ScanCanvas.width = 640;\n      BarcodeReader.ScanCanvas.height = 480;\n    }\n    BarcodeReader.DecoderWorker.onmessage = BarcodeReader.BarcodeReaderImageCallback;\n    BarcodeReader.ScanContext.drawImage(image, 0, 0, BarcodeReader.ScanCanvas.width, BarcodeReader.ScanCanvas.height);\n    BarcodeReader.Orientation = orientation;\n    BarcodeReader.DecoderWorker.postMessage({\n      scan: BarcodeReader.ScanContext.getImageData(0, 0, BarcodeReader.ScanCanvas.width, BarcodeReader.ScanCanvas.height).data,\n      scanWidth: BarcodeReader.ScanCanvas.width,\n      scanHeight: BarcodeReader.ScanCanvas.height,\n      multiple: BarcodeReader.Config.Multiple,\n      decodeFormats: BarcodeReader.Config.DecodeFormats,\n      cmd: \"normal\",\n      rotation: orientation,\n      postOrientation: BarcodeReader.PostOrientation\n    });\n  },\n\n  DetectVerticalSquash: function(img) {\n    var ih = img.naturalHeight;\n    var canvas = BarcodeReader.SquashCanvas;\n    var alpha;\n    var data;\n    canvas.width = 1;\n    canvas.height = ih;\n    var ctx = canvas.getContext('2d');\n    ctx.drawImage(img, 0, 0);\n    try {\n      data = ctx.getImageData(0, 0, 1, ih).data;\n    } catch (err) {\n      console.log(\"Cannot check verticalSquash: CORS?\");\n      return 1;\n    }\n    var sy = 0;\n    var ey = ih;\n    var py = ih;\n    while (py > sy) {\n      alpha = data[(py - 1) * 4 + 3];\n      if (alpha === 0) {\n        ey = py;\n      } else {\n        sy = py;\n      }\n      py = (ey + sy) >> 1;\n    }\n    var ratio = (py / ih);\n    return (ratio === 0) ? 1 : ratio;\n  },\n\n  FixCanvas: function(canvas) {\n    var ctx = canvas.getContext('2d');\n    var drawImage = ctx.drawImage;\n    ctx.drawImage = function(img, sx, sy, sw, sh, dx, dy, dw, dh) {\n      var vertSquashRatio = 1;\n      if (!!img && img.nodeName === 'IMG') {\n        vertSquashRatio = BarcodeReader.DetectVerticalSquash(img);\n        // sw || (sw = img.naturalWidth);\n        // sh || (sh = img.naturalHeight);\n      }\n      if (arguments.length === 9)\n        drawImage.call(ctx, img, sx, sy, sw, sh, dx, dy, dw, dh / vertSquashRatio);\n      else if (typeof sw !== 'undefined')\n        drawImage.call(ctx, img, sx, sy, sw, sh / vertSquashRatio);\n      else\n        drawImage.call(ctx, img, sx, sy);\n    };\n    return canvas;\n  }\n};\n\nmodule.exports = {BarcodeReader};\n\n// if (typeof exports !== 'undefined') {\n//   if (typeof module !== 'undefined' && module.exports) {\n//       exports = module.exports = BarcodeReader;\n//   }\n//   exports.BarcodeReader = BarcodeReader;\n// } else {\n//   root.BarcodeReader = BarcodeReader;\n// }\n\n\n//# sourceURL=webpack:///./src/js/BarcodeReader.js?");

/***/ }),

/***/ "./src/js/DecoderWorker.js":
/*!*********************************!*\
  !*** ./src/js/DecoderWorker.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* --------------------------------------------------\nJavascript Only Barcode_Reader (BarcodeReader) V1.6 by Eddie Larsson <https://github.com/EddieLa/BarcodeReader>\n\nThis software is provided under the MIT license, http://opensource.org/licenses/MIT.\nAll use of this software must include this\ntext, including the reference to the creator of the original source code. The\noriginator accepts no responsibility of any kind pertaining to\nuse of this software.\n\nCopyright (c) 2013 Eddie Larsson\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n------------------------ */\n\nvar decoderWorkerBlob = function decoderWorkerBlob(){\n\n  function Rotate(data, width, height, rotation) {\n    var newData = [];\n    var x, y;\n    switch (rotation) {\n      case 90:\n        for (x = 0; x < width * 4; x += 4) {\n          for (y = width * 4 * (height - 1); y >= 0; y -= width * 4) {\n            newData.push(data[x + y]);\n            newData.push(data[x + y + 1]);\n            newData.push(data[x + y + 2]);\n            newData.push(data[x + y + 3]);\n          }\n        }\n        break;\n      case -90:\n        for (x = width * 4 - 4; x >= 0; x -= 4) {\n          for (y = 0; y < data.length; y += width * 4) {\n            newData.push(data[x + y]);\n            newData.push(data[x + y + 1]);\n            newData.push(data[x + y + 2]);\n            newData.push(data[x + y + 3]);\n          }\n        }\n        break;\n      case 180:\n        for (y = width * 4 * (height - 1); y >= 0; y -= width * 4) {\n          for (x = width * 4 - 4; x >= 0; x -= 4) {\n            newData.push(data[x + y]);\n            newData.push(data[x + y + 1]);\n            newData.push(data[x + y + 2]);\n            newData.push(data[x + y + 3]);\n          }\n        }\n    }\n    return new Uint8ClampedArray(newData);\n  }\n\n  function BoxFilter(data, width, radius) {\n    var elements = [];\n    var sum = [];\n    var val;\n    var x, y, i;\n    for (x = 0; x < width; x++) {\n      elements.push([]);\n      sum.push(0);\n      for (y = 0; y < (radius + 1) * width; y += width) {\n        elements[elements.length - 1].push(data[x + y]);\n        sum[sum.length - 1] = sum[sum.length - 1] + data[x + y];\n      }\n    }\n    var newData = [];\n    for (y = 0; y < data.length; y += width) {\n      for (x = 0; x < width; x++) {\n        var newVal = 0;\n        var length = 0;\n        for (i = x; i >= 0; i--) {\n          newVal += sum[i];\n          length++;\n          if (length === radius + 1) break;\n        }\n        var tempLength = 0;\n        for (i = x + 1; i < width; i++) {\n          newVal += sum[i];\n          length++;\n          tempLength++;\n          if (tempLength === radius) break;\n        }\n        length *= elements[0].length;\n        newVal /= length;\n        newData.push(newVal);\n      }\n      if (y - radius * width >= 0) {\n        for (i = 0; i < elements.length; i++) {\n          val = elements[i].shift();\n          sum[i] = sum[i] - val;\n        }\n      }\n      if (y + (radius + 1) * width < data.length) {\n        for (i = 0; i < elements.length; i++) {\n          val = data[i + y + (radius + 1) * width];\n          elements[i].push(val);\n          sum[i] = sum[i] + val;\n        }\n      }\n    }\n    return newData;\n  }\n\n  function Scale(data, width, height) {\n    var newData = [];\n    var x, y;\n    for (y = 0; y < data.length; y += width * 8) {\n      for (x = 0; x < width * 4; x += 8) {\n        var r = (data[y + x] + data[y + x + 4] + data[y + width * 4 + x] + data[y + width * 4 + x + 4]) / 4;\n        newData.push(r);\n        var g = (data[y + x + 1] + data[y + x + 4 + 1] + data[y + width * 4 + x + 1] + data[y + width * 4 + x + 4 + 1]) / 4;\n        newData.push(g);\n        var b = (data[y + x + 2] + data[y + x + 4 + 2] + data[y + width * 4 + x + 2] + data[y + width * 4 + x + 4 + 2]) / 4;\n        newData.push(b);\n        newData.push(255);\n      }\n    }\n    return new Uint8ClampedArray(newData);\n  }\n\n  function IntensityGradient(data, width) {\n    var newData = [];\n    var max = Number.MIN_VALUE;\n    var min = Number.MAX_VALUE;\n    var x, y, i;\n    for (y = 0; y < data.length; y += width * 4) {\n      for (x = 0; x < width * 4; x += 4) {\n        var horizontalDiff = 0;\n        var verticalDiff = 0;\n        for (i = 1; i < 2; i++) {\n          if (x + i * 4 < width * 4) {\n            horizontalDiff = horizontalDiff + Math.abs(data[y + x] - data[y + x + i * 4]);\n          }\n          if (y + width * 4 * i < data.length) {\n            verticalDiff += verticalDiff + Math.abs(data[y + x] - data[y + x + width * 4 * i]);\n          }\n        }\n        var diff = horizontalDiff - verticalDiff;\n        max = diff > max ? diff : max;\n        min = diff < min ? diff : min;\n        newData.push(diff);\n      }\n    }\n    if (min < 0) {\n      for (i = 0; i < newData.length; i++) {\n        newData[i] = newData[i] - min;\n      }\n      min = 0;\n    }\n    return newData;\n  }\n\n  function greyScale(data) {\n    var i;\n    for (i = 0; i < data.length; i += 4) {\n      var max = 0;\n      var min = 255;\n      max = data[i] > max ? data[i] : max;\n      max = data[i + 1] > max ? data[i + 1] : max;\n      max = data[i + 2] > max ? data[i + 2] : max;\n      min = data[i] < min ? data[i] : min;\n      min = data[i + 1] < min ? data[i + 1] : min;\n      min = data[i + 2] < min ? data[i + 2] : min;\n      data[i] = data[i + 1] = data[i + 2] = (max + min) / 2;\n    }\n  }\n\n  function histogram(data) {\n    var i;\n    var hist = [];\n    for (i = 0; i < 256; i++) {\n      hist[i] = 0;\n    }\n    for (i = 0; i < data.length; i += 4) {\n      hist[data[i]] = hist[data[i]] + 1;\n    }\n    return hist;\n  }\n\n  function otsu(histogram, total) {\n    var i;\n    var sum = 0;\n    for (i = 1; i < histogram.length; ++i)\n      sum += i * histogram[i];\n    var sumB = 0;\n    var wB = 0;\n    var wF = 0;\n    var mB;\n    var mF;\n    var max = 0.0;\n    var between = 0.0;\n    var threshold1 = 0.0;\n    var threshold2 = 0.0;\n    for (i = 0; i < histogram.length; ++i) {\n      wB += histogram[i];\n      if (wB === 0)\n        continue;\n      wF = total - wB;\n      if (wF === 0)\n        break;\n      sumB += i * histogram[i];\n      mB = sumB / wB;\n      mF = (sum - sumB) / wF;\n      between = wB * wF * Math.pow(mB - mF, 2);\n      if (between >= max) {\n        threshold1 = i;\n        if (between > max) {\n          threshold2 = i;\n        }\n        max = between;\n      }\n    }\n    return (threshold1 + threshold2) / 2.0;\n  }\n\n  function CreateImageData() {\n    Image.data = new Uint8ClampedArray(Image.width * Image.height * 4);\n    var Converter;\n    var x, y;\n    for (y = 0; y < Image.height; y++) {\n      for (x = 0; x < Image.width; x++) {\n        Converter = y * 4 * Image.width;\n        Image.data[Converter + x * 4] = Image.table[x][y][0];\n        Image.data[Converter + x * 4 + 1] = Image.table[x][y][1];\n        Image.data[Converter + x * 4 + 2] = Image.table[x][y][2];\n        Image.data[Converter + x * 4 + 3] = Image.table[x][y][3];\n      }\n    }\n  }\n\n  function CreateScanImageData() {\n    ScanImage.data = new Uint8ClampedArray(ScanImage.width * ScanImage.height * 4);\n    var Converter;\n    var x, y;\n    for (y = 0; y < ScanImage.height; y++) {\n      for (x = 0; x < ScanImage.width; x++) {\n        Converter = y * 4 * ScanImage.width;\n        ScanImage.data[Converter + x * 4] = ScanImage.table[x][y][0];\n        ScanImage.data[Converter + x * 4 + 1] = ScanImage.table[x][y][1];\n        ScanImage.data[Converter + x * 4 + 2] = ScanImage.table[x][y][2];\n        ScanImage.data[Converter + x * 4 + 3] = ScanImage.table[x][y][3];\n      }\n    }\n  }\n\n  function CreateTable() {\n    Image.table = [];\n    var tempArray = [];\n    var i, j;\n    for (i = 0; i < Image.width * 4; i += 4) {\n      tempArray = [];\n      for (j = i; j < Image.data.length; j += Image.width * 4) {\n        tempArray.push([Image.data[j], Image.data[j + 1], Image.data[j + 2], Image.data[j + 3]]);\n      }\n      Image.table.push(tempArray);\n    }\n  }\n\n  function CreateScanTable() {\n    ScanImage.table = [];\n    var tempArray = [];\n    var i, j;\n    for (i = 0; i < ScanImage.width * 4; i += 4) {\n      tempArray = [];\n      for (j = i; j < ScanImage.data.length; j += ScanImage.width * 4) {\n        tempArray.push([ScanImage.data[j], ScanImage.data[j + 1], ScanImage.data[j + 2], ScanImage.data[j + 3]]);\n      }\n      ScanImage.table.push(tempArray);\n    }\n  }\n\n  function EnlargeTable(h, w) {\n    var TempArray = [];\n    var x, y, i;\n    for (x = 0; x < Image.width; x++) {\n      TempArray = [];\n      for (y = 0; y < Image.height; y++) {\n        for (i = 0; i < h; i++) {\n          TempArray.push(Image.table[x][y]);\n        }\n      }\n      Image.table[x] = TempArray.slice();\n    }\n    TempArray = Image.table.slice();\n    for (x = 0; x < Image.width; x++) {\n      for (i = 0; i < w; i++) {\n        Image.table[x * w + i] = TempArray[x].slice();\n      }\n    }\n    Image.width = Image.table.length;\n    Image.height = Image.table[0].length;\n    CreateImageData();\n  }\n\n  function ScaleHeight(scale) {\n    var tempArray = [];\n    var avrgRed = 0;\n    var avrgGreen = 0;\n    var avrgBlue = 0;\n    var i, j, k;\n    for (i = 0; i < Image.height - scale; i += scale) {\n      for (j = 0; j < Image.width; j++) {\n        avrgRed = 0;\n        avrgGreen = 0;\n        avrgBlue = 0;\n        for (k = i; k < i + scale; k++) {\n          avrgRed += Image.table[j][k][0];\n          avrgGreen += Image.table[j][k][1];\n          avrgBlue += Image.table[j][k][2];\n        }\n        tempArray.push(avrgRed / scale);\n        tempArray.push(avrgGreen / scale);\n        tempArray.push(avrgBlue / scale);\n        tempArray.push(255);\n      }\n    }\n    return new Uint8ClampedArray(tempArray);\n  }\n\n  function Intersects(rectOne, rectTwo) {\n    return (rectOne[0][0] <= rectTwo[0][1] &&\n      rectTwo[0][0] <= rectOne[0][1] &&\n      rectOne[1][0] <= rectTwo[1][1] &&\n      rectTwo[1][0] <= rectOne[1][1]);\n  }\n\n  function maxLocalization(max, maxPos, data) {\n    var originalMax = max;\n    var rects = [];\n    var x, y, i;\n    do {\n      var startX = maxPos % Image.width;\n      var startY = (maxPos - startX) / Image.width;\n      var minY = 0;\n      var maxY = Image.height;\n      var minX = 0;\n      var maxX = Image.width - 1;\n      for (y = startY; y < Image.height - 1; y++) {\n        if (Image.table[startX][y + 1][0] === 0) {\n          maxY = y;\n          break;\n        }\n      }\n      for (y = startY; y > 0; y--) {\n        if (Image.table[startX][y - 1][0] === 0) {\n          minY = y;\n          break;\n        }\n      }\n      for (x = startX; x < Image.width - 1; x++) {\n        if (Image.table[x + 1][startY][0] === 0) {\n          maxX = x;\n          break;\n        }\n      }\n      for (x = startX; x > 0; x--) {\n        if (Image.table[x - 1][startY][0] === 0) {\n          minX = x;\n          break;\n        }\n      }\n      for (y = minY * Image.width; y <= maxY * Image.width; y += Image.width) {\n        for (x = minX; x <= maxX; x++) {\n          data[y + x] = 0;\n        }\n      }\n      var newRect = [\n        [minX, maxX],\n        [minY, maxY]\n      ];\n      for (i = 0; i < rects.length; i++) {\n        if (Intersects(newRect, rects[i])) {\n          if (rects[i][0][1] - rects[i][0][0] > newRect[0][1] - newRect[0][0]) {\n            rects[i][0][0] = rects[i][0][0] < newRect[0][0] ? rects[i][0][0] : newRect[0][0];\n            rects[i][0][1] = rects[i][0][1] > newRect[0][1] ? rects[i][0][1] : newRect[0][1];\n            newRect = [];\n            break;\n          } else {\n            rects[i][0][0] = rects[i][0][0] < newRect[0][0] ? rects[i][0][0] : newRect[0][0];\n            rects[i][0][1] = rects[i][0][1] > newRect[0][1] ? rects[i][0][1] : newRect[0][1];\n            rects[i][1][0] = newRect[1][0];\n            rects[i][1][1] = newRect[1][1];\n            newRect = [];\n            break;\n          }\n        }\n      }\n      if (newRect.length > 0) {\n        rects.push(newRect);\n      }\n      max = 0;\n      maxPos = 0;\n      var newMaxPos = 0;\n      for (i = 0; i < data.length; i++) {\n        if (data[i] > max) {\n          max = data[i];\n          maxPos = i;\n        }\n      }\n    } while (max > originalMax * 0.70);\n    return rects;\n  }\n\n  function ImgProcessing() {\n    greyScale(Image.data);\n    var newData = IntensityGradient(Image.data, Image.width);\n    newData = BoxFilter(newData, Image.width, 15);\n    var min = newData[0];\n    var i, x, y;\n    for (i = 1; i < newData.length; i++) {\n      min = min > newData[i] ? newData[i] : min;\n    }\n    var max = 0;\n    var maxPos = 0;\n    var avrgLight = 0;\n    for (i = 0; i < newData.length; i++) {\n      newData[i] = Math.round((newData[i] - min));\n      avrgLight += newData[i];\n      if (max < newData[i]) {\n        max = newData[i];\n        maxPos = i;\n      }\n    }\n    avrgLight /= newData.length;\n    if (avrgLight < 15) {\n      newData = BoxFilter(newData, Image.width, 8);\n      min = newData[0];\n      for (i = 1; i < newData.length; i++) {\n        min = min > newData[i] ? newData[i] : min;\n      }\n      max = 0;\n      maxPos = 0;\n      for (i = 0; i < newData.length; i++) {\n        newData[i] = Math.round((newData[i] - min));\n        if (max < newData[i]) {\n          max = newData[i];\n          maxPos = i;\n        }\n      }\n    }\n    var hist = [];\n    for (i = 0; i <= max; i++) {\n      hist[i] = 0;\n    }\n    for (i = 0; i < newData.length; i++) {\n      hist[newData[i]] = hist[newData[i]] + 1;\n    }\n    var thresh = otsu(hist, newData.length);\n    for (i = 0; i < newData.length; i++) {\n      if (newData[i] < thresh) {\n        Image.data[i * 4] = Image.data[i * 4 + 1] = Image.data[i * 4 + 2] = 0;\n      } else {\n        Image.data[i * 4] = Image.data[i * 4 + 1] = Image.data[i * 4 + 2] = 255;\n      }\n    }\n    CreateTable();\n    var rects = maxLocalization(max, maxPos, newData);\n    var feedBack = [];\n    for (i = 0; i < rects.length; i++) {\n      feedBack.push({\n        x: rects[i][0][0],\n        y: rects[i][1][0],\n        width: rects[i][0][1] - rects[i][0][0],\n        height: rects[i][1][1] - rects[i][1][0]\n      });\n    }\n    if (feedBack.length > 0) postMessage({\n      result: feedBack,\n      success: \"localization\"\n    });\n    allTables = [];\n    for (i = 0; i < rects.length; i++) {\n      var newTable = [];\n      for (x = rects[i][0][0] * 2; x < rects[i][0][1] * 2; x++) {\n        var tempArray = [];\n        for (y = rects[i][1][0] * 2; y < rects[i][1][1] * 2; y++) {\n          tempArray.push([ScanImage.table[x][y][0], ScanImage.table[x][y][1], ScanImage.table[x][y][2], 255]);\n        }\n        newTable.push(tempArray);\n      }\n      if (newTable.length < 1) continue;\n      Image.table = newTable;\n      Image.width = newTable.length;\n      Image.height = newTable[0].length;\n      CreateImageData();\n      allTables.push({\n        table: newTable,\n        data: new Uint8ClampedArray(Image.data),\n        width: Image.width,\n        height: Image.height\n      });\n    }\n  }\n\n  function showImage(data, width, height) {\n    postMessage({\n      result: data,\n      width: width,\n      height: height,\n      success: \"image\"\n    });\n  }\n\n  function Main() {\n    ImgProcessing();\n    var allResults = [];\n    var tempObj;\n    var tempData;\n    var hist;\n    var val;\n    var thresh;\n    var start;\n    var end;\n    var z, i;\n    for (z = 0; z < allTables.length; z++) {\n      Image = allTables[z];\n      var scaled = ScaleHeight(30);\n      var variationData;\n      var incrmt = 0;\n      var format = \"\";\n      var first = true;\n      var eanStatistics = {};\n      var eanOrder = [];\n      Selection = false;\n      do {\n        tempData = scaled.subarray(incrmt, incrmt + Image.width * 4);\n        hist = [];\n        for (i = 0; i < 256; i++) {\n          hist[i] = 0;\n        }\n        for (i = 0; i < tempData.length; i += 4) {\n          val = Math.round((tempData[i] + tempData[i + 1] + tempData[i + 2]) / 3);\n          hist[val] = hist[val] + 1;\n        }\n        thresh = otsu(hist, tempData.length / 4);\n        start = thresh < 41 ? 1 : thresh - 40;\n        end = thresh > 254 - 40 ? 254 : thresh + 40;\n        variationData = yStraighten(tempData, start, end);\n        Selection = BinaryString(variationData);\n        if (Selection.string) {\n          format = Selection.format;\n          tempObj = Selection;\n          Selection = Selection.string;\n          if (format === \"EAN-13\") {\n            if (typeof eanStatistics[Selection] === 'undefined') {\n              eanStatistics[Selection] = {\n                count: 1,\n                correction: tempObj.correction\n              };\n              eanOrder.push(Selection);\n            } else {\n              eanStatistics[Selection].count = eanStatistics[Selection].count + 1;\n              eanStatistics[Selection].correction = eanStatistics[Selection].correction + tempObj.correction;\n            }\n            Selection = false;\n          }\n        } else {\n          Selection = false;\n        }\n        incrmt += Image.width * 4;\n      } while (!Selection && incrmt < scaled.length);\n      if (Selection && format !== \"EAN-13\") allResults.push({\n        Format: format,\n        Value: Selection\n      });\n      if (format === \"EAN-13\") Selection = false;\n      if (!Selection) {\n        EnlargeTable(4, 2);\n        incrmt = 0;\n        scaled = ScaleHeight(20);\n        do {\n          tempData = scaled.subarray(incrmt, incrmt + Image.width * 4);\n          hist = [];\n          for (i = 0; i < 256; i++) {\n            hist[i] = 0;\n          }\n          for (i = 0; i < tempData.length; i += 4) {\n            val = Math.round((tempData[i] + tempData[i + 1] + tempData[i + 2]) / 3);\n            hist[val] = hist[val] + 1;\n          }\n          thresh = otsu(hist, tempData.length / 4);\n          start = thresh < 40 ? 0 : thresh - 40;\n          end = thresh > 255 - 40 ? 255 : thresh + 40;\n          variationData = yStraighten(tempData, start, end);\n          Selection = BinaryString(variationData);\n          if (Selection.string) {\n            format = Selection.format;\n            tempObj = Selection;\n            Selection = Selection.string;\n            if (format === \"EAN-13\") {\n              if (typeof eanStatistics[Selection] === 'undefined') {\n                eanStatistics[Selection] = {\n                  count: 1,\n                  correction: tempObj.correction\n                };\n                eanOrder.push(Selection);\n              } else {\n                eanStatistics[Selection].count = eanStatistics[Selection].count + 1;\n                eanStatistics[Selection].correction = eanStatistics[Selection].correction + tempObj.correction;\n              }\n              Selection = false;\n            }\n          } else {\n            Selection = false;\n          }\n          incrmt += Image.width * 4;\n        } while (!Selection && incrmt < scaled.length);\n        if (format === \"EAN-13\") {\n          var points = {};\n          for (var key in eanStatistics) {\n            eanStatistics[key].correction = eanStatistics[key].correction / eanStatistics[key].count;\n            var pointTemp = eanStatistics[key].correction;\n            pointTemp -= eanStatistics[key].count;\n            pointTemp += eanOrder.indexOf(key);\n            points[key] = pointTemp;\n          }\n          var minPoints = Number.POSITIVE_INFINITY;\n          var tempString = \"\";\n          for (var point in points) {\n            if (points[point] < minPoints) {\n              minPoints = points[point];\n              tempString = key;\n            }\n          }\n          if (minPoints < 11) {\n            Selection = tempString;\n          } else {\n            Selection = false;\n          }\n        }\n        if (Selection) allResults.push({\n          Format: format,\n          Value: Selection\n        });\n      }\n      if (allResults.length > 0 && !Multiple) break;\n    }\n    return allResults;\n  }\n\n  function yStraighten(img, start, end) {\n    var average = 0;\n    var threshold;\n    var newImg = new Uint8ClampedArray(Image.width * (end - start + 1) * 4);\n    var i, j;\n    for (i = 0; i < newImg.length; i++) {\n      newImg[i] = 255;\n    }\n    for (i = 0; i < Image.width * 4; i += 4) {\n      threshold = end;\n      average = (img[i] + img[i + 1] + img[i + 2]) / 3;\n      if (i < Image.width * 4 - 4) {\n        average += (img[i + 4] + img[i + 5] + img[i + 6]) / 3;\n        average /= 2;\n      }\n      for (j = i; j < newImg.length; j += Image.width * 4) {\n        if (average < threshold) {\n          newImg[j] = newImg[j + 1] = newImg[j + 2] = 0;\n        }\n        threshold--;\n      }\n    }\n    return newImg;\n  }\n\n  function CheckEan13(values, middle) {\n    if (middle) {\n      if (values.length !== 5) return false;\n    } else {\n      if (values.length !== 3) return false;\n    }\n    var avrg = 0;\n    var i;\n    for (i = 0; i < values.length; i++) {\n      avrg += values[i];\n    }\n    avrg /= values.length;\n    for (i = 0; i < values.length; i++) {\n      if (values[i] / avrg < 0.5 || values[i] / avrg > 1.5) return false;\n    }\n    return true;\n  }\n\n  function TwoOfFiveStartEnd(values, start) {\n    if (values.length < 5 || values.length > 6) return false;\n    var maximum = 0;\n    var TwoOfFiveMax = [0, 0];\n    var u;\n    for (u = 0; u < values.length; u++) {\n      if (values[u] > maximum) {\n        maximum = values[u];\n        TwoOfFiveMax[0] = u;\n      }\n    }\n    maximum = 0;\n    for (u = 0; u < values.length; u++) {\n      if (u === TwoOfFiveMax[0]) continue;\n      if (values[u] > maximum) {\n        maximum = values[u];\n        TwoOfFiveMax[1] = u;\n      }\n    }\n    if (start) {\n      return TwoOfFiveMax[0] + TwoOfFiveMax[1] === 2;\n    } else {\n      return TwoOfFiveMax[0] + TwoOfFiveMax[1] === 2;\n    }\n  }\n\n  function CheckInterleaved(values, start) {\n    var average = 0;\n    var i;\n    for (i = 0; i < values.length; i++) {\n      average += values[i];\n    }\n    average /= 4;\n    if (start) {\n      if (values.length !== 4) return false;\n      for (i = 0; i < values.length; i++) {\n        if (values[i] / average < 0.5 || values[i] / average > 1.5) return false;\n      }\n      return true;\n    } else {\n      if (values.length !== 3) return false;\n      var max = 0;\n      var pos;\n      for (i = 0; i < values.length; i++) {\n        if (values[i] > max) {\n          max = values[i];\n          pos = i;\n        }\n      }\n      if (pos !== 0) return false;\n      if (values[0] / average < 1.5 || values[0] / average > 2.5) return false;\n      for (i = 1; i < values.length; i++) {\n        if (values[i] / average < 0.5 || values[i] / average > 1.5) return false;\n      }\n      return true;\n    }\n  }\n\n  function BinaryConfiguration(binaryString, type) {\n    var result = [];\n    var binTemp = [];\n    var count = 0;\n    var bars;\n    var len;\n    var totalBars;\n    var i;\n    if (type === \"Code128\" || type === \"Code93\") {\n      totalBars = 6;\n      len = binaryString[0];\n      if (type === \"Code128\") len /= 2;\n      for (i = 0; i < binaryString.length; i++) {\n        if (binaryString[i] > len * 6) {\n          binaryString.splice(i, binaryString.length);\n          break;\n        }\n      }\n      do {\n        if (binaryString.length === 7 && type === \"Code128\") {\n          result.push(binaryString.splice(0, binaryString.length));\n        } else {\n          result.push(binaryString.splice(0, totalBars));\n        }\n        if (type === \"Code93\" && binaryString.length < 6) binaryString.splice(0, totalBars);\n      } while (binaryString.length > 0);\n    }\n    if (type === \"Code39\") {\n      totalBars = 9;\n      len = binaryString[0];\n      for (i = 0; i < binaryString.length; i++) {\n        if (binaryString[i] > len * 5) {\n          binaryString.splice(i, binaryString.length);\n          break;\n        }\n      }\n      do {\n        result.push(binaryString.splice(0, totalBars));\n        binaryString.splice(0, 1);\n      } while (binaryString.length > 0);\n    }\n    if (type === \"EAN-13\") {\n      totalBars = 4;\n      len = binaryString[0];\n      var secureCount = 0;\n      for (i = 0; i < binaryString.length; i++) {\n        if (binaryString[i] > len * 6) {\n          binaryString.splice(i, binaryString.length);\n          break;\n        }\n      }\n      if (CheckEan13(binaryString.splice(0, 3), false)) secureCount++;\n      count = 0;\n      do {\n        result.push(binaryString.splice(0, totalBars));\n        count++;\n        if (count === 6)\n          if (CheckEan13(binaryString.splice(0, 5), true)) secureCount++;\n      } while (result.length < 12 && binaryString.length > 0);\n      if (CheckEan13(binaryString.splice(0, 3), false)) secureCount++;\n      if (secureCount < 2) return [];\n    }\n    if (type === \"2Of5\") {\n      totalBars = 5;\n      len = binaryString[0] / 2;\n      for (i = 0; i < binaryString.length; i++) {\n        if (binaryString[i] > len * 5) {\n          binaryString.splice(i, binaryString.length);\n          break;\n        }\n      }\n      var temp = binaryString.splice(0, 6);\n      result.push(temp);\n      do {\n        binTemp = [];\n        for (i = 0; i < totalBars; i++) {\n          binTemp.push(binaryString.splice(0, 1)[0]);\n          // binaryString.splice(0, 1)[0];\n        }\n        result.push(binTemp);\n        if (binaryString.length === 5) result.push(binaryString.splice(0, 5));\n      } while (binaryString.length > 0);\n    }\n    if (type === \"Inter2Of5\") {\n      totalBars = 5;\n      len = binaryString[0];\n      for (i = 0; i < binaryString.length; i++) {\n        if (binaryString[i] > len * 5) {\n          binaryString.splice(i, binaryString.length);\n          break;\n        }\n      }\n      result.push(binaryString.splice(0, 4));\n      var binTempWhite = [];\n      do {\n        binTemp = [];\n        binTempWhite = [];\n        for (i = 0; i < totalBars; i++) {\n          binTemp.push(binaryString.splice(0, 1)[0]);\n          binTempWhite.push(binaryString.splice(0, 1)[0]);\n        }\n        result.push(binTemp);\n        result.push(binTempWhite);\n        if (binaryString.length === 3) result.push(binaryString.splice(0, 3));\n      } while (binaryString.length > 0);\n    }\n    if (type === \"Codabar\") {\n      totalBars = 7;\n      len = binaryString[0];\n      for (i = 0; i < binaryString.length; i++) {\n        if (binaryString[i] > len * 5) {\n          binaryString.splice(i, binaryString.length);\n          break;\n        }\n      }\n      do {\n        result.push(binaryString.splice(0, totalBars));\n        binaryString.splice(0, 1);\n      } while (binaryString.length > 0);\n    }\n    return result;\n  }\n\n  function BinaryString(img, type) {\n    var binaryString = [];\n    var binTemp = [];\n    var container = 255;\n    var count = 0;\n    var format;\n    var tempString;\n    var j, i;\n    for (j = 0; j < img.length - Image.width * 4; j += Image.width * 4) {\n      var SlicedArray = img.subarray(j, j + Image.width * 4);\n      binaryString = [];\n      i = 0;\n      while (SlicedArray[i] === 255) {\n        i += 4;\n      }\n      while (i < SlicedArray.length) {\n        count = 0;\n        container = SlicedArray[i];\n        while (SlicedArray[i] === container && i < SlicedArray.length) {\n          count++;\n          i += 4;\n        }\n        binaryString.push(count);\n      }\n      if (binaryString.length > 2 && binaryString[0] <= binaryString[1] / 10) {\n        binaryString.splice(0, 2);\n      }\n      var binaryHolder = binaryString.slice();\n      var success = false;\n      for (i = 0; i < FormatPriority.length; i++) {\n        binaryString = binaryHolder.slice();\n        var first;\n        var second;\n        binaryString = BinaryConfiguration(binaryString, FormatPriority[i]);\n        if (FormatPriority[i] === \"2Of5\" || FormatPriority[i] === \"Inter2Of5\") {\n          first = binaryString.splice(0, 1)[0];\n          second = binaryString.splice(binaryString.length - 1, 1)[0];\n        }\n        binTemp = Distribution(binaryString, FormatPriority[i]);\n        if (FormatPriority[i] === \"EAN-13\") {\n          binaryString = binTemp.data;\n          corrections = binTemp.correction;\n        } else {\n          binaryString = binTemp;\n        }\n        if (typeof binaryString === 'undefined') continue;\n        if (binaryString.length > 4 || (FormatPriority[i] === \"Code39\" && binaryString.length > 2)) {\n          if (FormatPriority[i] === \"Code128\") {\n            if (CheckCode128(binaryString)) {\n              binaryString = DecodeCode128(binaryString);\n              success = true;\n            }\n          } else if (FormatPriority[i] === \"Code93\") {\n            if (CheckCode93(binaryString)) {\n              binaryString = DecodeCode93(binaryString);\n              success = true;\n            }\n          } else if (FormatPriority[i] === \"Code39\") {\n            if (CheckCode39(binaryString)) {\n              binaryString = DecodeCode39(binaryString);\n              success = true;\n            }\n          } else if (FormatPriority[i] === \"EAN-13\") {\n            tempString = DecodeEAN13(binaryString);\n            if (tempString) {\n              if (tempString.length === 13) {\n                binaryString = tempString;\n                success = true;\n              }\n            }\n          } else if (FormatPriority[i] === \"2Of5\" || FormatPriority[i] === \"Inter2Of5\") {\n            if (FormatPriority[i] === \"2Of5\") {\n              if (typeof first !== 'undefined')\n                if (!TwoOfFiveStartEnd(first, true)) continue;\n              if (typeof second !== 'undefined')\n                if (!TwoOfFiveStartEnd(second, false)) continue;\n            }\n            if (FormatPriority[i] === \"Inter2Of5\") {\n              if (typeof first !== 'undefined')\n                if (!CheckInterleaved(first, true)) continue;\n              if (typeof second !== 'undefined')\n                if (!CheckInterleaved(second, false)) continue;\n            }\n            tempString = Decode2Of5(binaryString);\n            if (tempString) {\n              binaryString = tempString;\n              success = true;\n            }\n          } else if (FormatPriority[i] === \"Codabar\") {\n            tempString = DecodeCodaBar(binaryString);\n            if (tempString) {\n              binaryString = tempString;\n              success = true;\n            }\n          }\n        }\n        if (success) {\n          format = FormatPriority[i];\n          if (format === \"Inter2Of5\") format = \"Interleaved 2 of 5\";\n          if (format === \"2Of5\") format = \"Standard 2 of 5\";\n          break;\n        }\n      }\n      if (success) break;\n    }\n    if (format === \"Code128\") {\n      if (typeof binaryString.string === 'string') {\n        return binaryString;\n      } else {\n        return {\n          string: false\n        };\n      }\n    }\n    if (typeof binaryString === 'string') {\n      if (format === \"EAN-13\") {\n        return {\n          string: binaryString,\n          format: format,\n          correction: corrections\n        };\n      } else {\n        return {\n          string: binaryString,\n          format: format\n        };\n      }\n    } else {\n      return {\n        string: false\n      };\n    }\n  }\n\n  function Distribution(totalBinArray, type) {\n    var testData = 0;\n    var result = [];\n    var totalBars;\n    var total;\n    var maxLength;\n    var k, i, j;\n    var blackMax;\n    var whiteMax;\n    var wideAvrg;\n    var narrowAvrg;\n    var prevPos;\n    var wideValues;\n    var max;\n\n    type = availableFormats.indexOf(type);\n\n    if (type === 0) {\n      total = 11;\n      totalBars = 6;\n      maxLength = 4;\n    } else if (type === 1) {\n      total = 9;\n      totalBars = 6;\n      maxLength = 4;\n    } else if (type === 2) {\n      total = 12;\n      totalBars = 9;\n    } else if (type === 3) {\n      total = 7;\n      totalBars = 4;\n      maxLength = 4;\n    } else if (type === 6) {\n      totalBars = 7;\n    }\n    for (k = 0; k < totalBinArray.length; k++) {\n      var BinArray = totalBinArray[k];\n      var sum = 0;\n      var counter = 0;\n      var tempBin = [];\n      var narrowArr = [];\n      var wideArr = [];\n      if (type === 6) {\n        var upperTolerance = 1.5;\n        var lowerTolerance = 1 / 2;\n        if (BinArray.length !== 7) return [];\n        if (k === 0 || k === totalBinArray.length - 1) {\n          whiteMax = [\n            [0, 0],\n            [0, 0]\n          ];\n          blackMax = [0, 0];\n          for (i = 0; i < BinArray.length; i++) {\n            if (i % 2 === 0) {\n              if (BinArray[i] > blackMax[0]) {\n                blackMax[0] = BinArray[i];\n                blackMax[1] = i;\n              }\n            } else {\n              if (BinArray[i] > whiteMax[0][0]) {\n                whiteMax[0][0] = BinArray[i];\n                prevPos = whiteMax[0][1];\n                whiteMax[0][1] = i;\n                i = prevPos - 1;\n                continue;\n              }\n              if (BinArray[i] > whiteMax[1][0] && i !== whiteMax[0][1]) {\n                whiteMax[1][0] = BinArray[i];\n                whiteMax[1][1] = i;\n              }\n            }\n          }\n          if (SecureCodabar) {\n            wideAvrg = whiteMax[0][0] + whiteMax[1][0] + blackMax[0];\n            wideAvrg /= 3;\n            wideValues = [whiteMax[0][0], whiteMax[1][0], blackMax[0]];\n            for (i = 0; i < wideValues.length; i++) {\n              if (wideValues[i] / wideAvrg > upperTolerance || wideValues[i] / wideAvrg < lowerTolerance) return [];\n            }\n            narrowAvrg = 0;\n            for (i = 0; i < BinArray.length; i++) {\n              if (i === blackMax[1] || i === whiteMax[0][1] || i === whiteMax[1][1]) continue;\n              narrowAvrg += BinArray[i];\n            }\n            narrowAvrg /= 4;\n            for (i = 0; i < BinArray.length; i++) {\n              if (i === blackMax[1] || i === whiteMax[0][1] || i === whiteMax[1][1]) continue;\n              if (BinArray[i] / narrowAvrg > upperTolerance || BinArray[i] / narrowAvrg < lowerTolerance) return [];\n            }\n          }\n          for (i = 0; i < BinArray.length; i++) {\n            if (i === blackMax[1] || i === whiteMax[0][1] || i === whiteMax[1][1]) {\n              tempBin.push(1);\n            } else {\n              tempBin.push(0);\n            }\n          }\n        } else {\n          blackMax = [0, 0];\n          whiteMax = [0, 0];\n          for (i = 0; i < BinArray.length; i++) {\n            if (i % 2 === 0) {\n              if (BinArray[i] > blackMax[0]) {\n                blackMax[0] = BinArray[i];\n                blackMax[1] = i;\n              }\n            } else {\n              if (BinArray[i] > whiteMax[0]) {\n                whiteMax[0] = BinArray[i];\n                whiteMax[1] = i;\n              }\n            }\n          }\n          if (blackMax[0] / whiteMax[0] > 1.55) {\n            var tempArray = blackMax;\n            blackMax = [tempArray, [0, 0],\n              [0, 0]\n            ];\n            for (i = 0; i < BinArray.length; i++) {\n              if (i % 2 === 0) {\n                if (BinArray[i] > blackMax[1][0] && i !== blackMax[0][1]) {\n                  blackMax[1][0] = BinArray[i];\n                  prevPos = blackMax[1][1];\n                  blackMax[1][1] = i;\n                  i = prevPos - 1;\n                  continue;\n                }\n                if (BinArray[i] > blackMax[2][0] && i !== blackMax[0][1] && i !== blackMax[1][1]) {\n                  blackMax[2][0] = BinArray[i];\n                  blackMax[2][1] = i;\n                }\n              }\n            }\n            if (SecureCodabar) {\n              wideAvrg = blackMax[0][0] + blackMax[1][0] + blackMax[2][0];\n              wideAvrg /= 3;\n              for (i = 0; i < blackMax.length; i++) {\n                if (blackMax[i][0] / wideAvrg > upperTolerance || blackMax[i][0] / wideAvrg < lowerTolerance) return [];\n              }\n              narrowAvrg = 0;\n              for (i = 0; i < BinArray.length; i++) {\n                if (i === blackMax[0][1] || i === blackMax[1][1] || i === blackMax[2][1]) continue;\n                narrowAvrg += BinArray[i];\n              }\n              narrowAvrg /= 4;\n              for (i = 0; i < BinArray.length; i++) {\n                if (i === blackMax[0][1] || i === blackMax[1][1] || i === blackMax[2][1]) continue;\n                if (BinArray[i] / narrowAvrg > upperTolerance || BinArray[i] / narrowAvrg < lowerTolerance) return [];\n              }\n            }\n            for (i = 0; i < BinArray.length; i++) {\n              if (i === blackMax[0][1] || i === blackMax[1][1] || i === blackMax[2][1]) {\n                tempBin.push(1);\n              } else {\n                tempBin.push(0);\n              }\n            }\n          } else {\n            if (SecureCodabar) {\n              wideAvrg = blackMax[0] + whiteMax[0];\n              wideAvrg /= 2;\n              if (blackMax[0] / wideAvrg > 1.5 || blackMax[0] / wideAvrg < 0.5) return [];\n              if (whiteMax[0] / wideAvrg > 1.5 || whiteMax[0] / wideAvrg < 0.5) return [];\n              narrowAvrg = 0;\n              for (i = 0; i < BinArray.length; i++) {\n                if (i === blackMax[1] || i === whiteMax[1]) continue;\n                narrowAvrg += BinArray[i];\n              }\n              narrowAvrg /= 5;\n              for (i = 0; i < BinArray.length; i++) {\n                if (i === blackMax[1] || i === whiteMax[1]) continue;\n                if (BinArray[i] / narrowAvrg > upperTolerance || BinArray[i] / narrowAvrg < lowerTolerance) return [];\n              }\n            }\n            for (i = 0; i < BinArray.length; i++) {\n              if (i === blackMax[1] || i === whiteMax[1]) {\n                tempBin.push(1);\n              } else {\n                tempBin.push(0);\n              }\n            }\n          }\n        }\n        result.push(tempBin);\n        continue;\n      }\n      if (type === 4 || type === 5) {\n        max = [\n          [0, 0],\n          [0, 0]\n        ];\n        for (i = 0; i < BinArray.length; i++) {\n          if (!isFinite(BinArray[i])) return [];\n          if (BinArray[i] > max[0][0]) {\n            max[0][0] = BinArray[i];\n            prevPos = max[0][1];\n            max[0][1] = i;\n            i = prevPos - 1;\n          }\n          if (BinArray[i] > max[1][0] && i !== max[0][1]) {\n            max[1][0] = BinArray[i];\n            max[1][1] = i;\n          }\n        }\n        if (Secure2Of5) {\n          wideAvrg = max[0][0] + max[1][0];\n          wideAvrg /= 2;\n          if (max[0][0] / wideAvrg > 1.3 || max[0][0] / wideAvrg < 0.7) return [];\n          if (max[1][0] / wideAvrg > 1.3 || max[1][0] / wideAvrg < 0.7) return [];\n          narrowAvrg = 0;\n          for (i = 0; i < BinArray.length; i++) {\n            if (i === max[0][1] || i === max[1][1]) continue;\n            narrowAvrg += BinArray[i];\n          }\n          narrowAvrg /= 3;\n          for (i = 0; i < BinArray.length; i++) {\n            if (i === max[0][1] || i === max[1][1]) continue;\n            if (BinArray[i] / narrowAvrg > 1.3 || BinArray[i] / narrowAvrg < 0.7) return [];\n          }\n        }\n        for (i = 0; i < BinArray.length; i++) {\n          if (i === max[0][1] || i === max[1][1]) {\n            tempBin.push(1);\n            continue;\n          }\n          tempBin.push(0);\n        }\n        result.push(tempBin);\n        continue;\n      }\n      while (counter < totalBars) {\n        sum += BinArray[counter];\n        counter++;\n      }\n      if (type === 2) {\n        var indexCount = [];\n        blackMax = [\n          [0, 0],\n          [0, 0]\n        ];\n        whiteMax = [0, 0];\n        for (j = 0; j < BinArray.length; j++) {\n          if (j % 2 === 0) {\n            if (BinArray[j] > blackMax[0][0]) {\n              blackMax[0][0] = BinArray[j];\n              prevPos = blackMax[0][1];\n              blackMax[0][1] = j;\n              j = prevPos;\n            }\n            if (BinArray[j] > blackMax[1][0] && j !== blackMax[0][1]) {\n              blackMax[1][0] = BinArray[j];\n              blackMax[1][1] = j;\n            }\n          } else {\n            if (BinArray[j] > whiteMax[0]) {\n              whiteMax[0] = BinArray[j];\n              whiteMax[1] = j;\n            }\n          }\n        }\n        if (whiteMax[0] / blackMax[0][0] > 1.5 && whiteMax[0] / blackMax[1][0] > 1.5) {\n          blackMax = [\n            [0, 0],\n            [0, 0]\n          ];\n          for (j = 0; j < BinArray.length; j++) {\n            if (j % 2 !== 0) {\n              if (BinArray[j] > blackMax[0][0] && j !== whiteMax[1]) {\n                blackMax[0][0] = BinArray[j];\n                prevPos = blackMax[0][1];\n                blackMax[0][1] = j;\n                j = prevPos;\n              }\n              if (BinArray[j] > blackMax[1][0] && j !== blackMax[0][1] && j !== whiteMax[1]) {\n                blackMax[1][0] = BinArray[j];\n                blackMax[1][1] = j;\n              }\n            }\n          }\n        }\n        wideAvrg = blackMax[0][0] + blackMax[1][0] + whiteMax[0];\n        wideAvrg /= 3;\n        if (blackMax[0][0] / wideAvrg > 1.6 || blackMax[0][0] / wideAvrg < 0.4) return [];\n        if (blackMax[1][0] / wideAvrg > 1.6 || blackMax[1][0] / wideAvrg < 0.4) return [];\n        if (whiteMax[0] / wideAvrg > 1.6 || whiteMax[0] / wideAvrg < 0.4) return [];\n        narrowAvrg = 0;\n        for (i = 0; i < BinArray.length; i++) {\n          if (i === blackMax[0][1] || i === blackMax[1][1] || i === whiteMax[1]) continue;\n          narrowAvrg += BinArray[i];\n        }\n        narrowAvrg /= 6;\n        for (i = 0; i < BinArray.length; i++) {\n          if (i === blackMax[0][1] || i === blackMax[1][1] || i === whiteMax[1]) continue;\n          if (BinArray[i] / narrowAvrg > 1.6 || BinArray[i] / narrowAvrg < 0.4) return [];\n        }\n        for (j = 0; j < BinArray.length; j++) {\n          if (j === blackMax[0][1] || j === blackMax[1][1] || j === whiteMax[1]) {\n            tempBin.push(2);\n          } else {\n            tempBin.push(1);\n          }\n        }\n        result.push(tempBin);\n        continue;\n      }\n      if (type === 3) {\n        max = [\n          [0, 0],\n          [0, 0],\n          [0, 0]\n        ];\n        for (j = 0; j < BinArray.length; j++) {\n          if (BinArray[j] > max[0][0]) {\n            max[0][0] = BinArray[j];\n            prevPos = max[0][1];\n            max[0][1] = j;\n            j = prevPos;\n          }\n          if (BinArray[j] > max[1][0] && j !== max[0][1]) {\n            max[1][0] = BinArray[j];\n            prevPos = max[1][1];\n            max[1][1] = j;\n            j = prevPos;\n          }\n          if (BinArray[j] > max[2][0] && j !== max[0][1] && j !== max[1][1]) {\n            max[2][0] = BinArray[j];\n            max[2][1] = j;\n          }\n        }\n        if (max[0][0] / max[1][0] >= 3) {\n          narrowAvrg = 0;\n          for (j = 0; j < BinArray.length; j++) {\n            if (j === max[0][1]) continue;\n            narrowAvrg += BinArray[j];\n          }\n          narrowAvrg /= 3;\n          for (j = 0; j < BinArray.length; j++) {\n            if (j === max[0][1]) continue;\n            if (BinArray[j] / narrowAvrg < 0.02 || BinArray[j] / narrowAvrg > 3) return {\n              data: [],\n              correction: 0\n            };\n          }\n          if (max[0][0] / narrowAvrg < 2.2 || max[0][0] / narrowAvrg > 6) return {\n            data: [],\n            correction: 0\n          };\n          for (j = 0; j < BinArray.length; j++) {\n            if (j === max[0][1]) {\n              tempBin.push(4);\n            } else {\n              tempBin.push(1);\n            }\n          }\n          result.push(tempBin);\n        } else if (max[0][0] / max[2][0] > 2) {\n          wideAvrg = max[0][0] + max[1][0];\n          wideAvrg /= 5;\n          if (max[0][0] / (wideAvrg * 3) < 0.02 || max[0][0] / (wideAvrg * 3) > 3) return {\n            data: [],\n            correction: 0\n          };\n          if (max[1][0] / (wideAvrg * 2) < 0.02 || max[1][0] / (wideAvrg * 2) > 3) return {\n            data: [],\n            correction: 0\n          };\n          narrowAvrg = 0;\n          for (j = 0; j < BinArray.length; j++) {\n            if (j === max[0][1] || j === max[1][1]) continue;\n            narrowAvrg += BinArray[j];\n          }\n          narrowAvrg /= 2;\n          for (j = 0; j < BinArray.length; j++) {\n            if (j === max[0][1] || j === max[1][1]) continue;\n            if (BinArray[j] / narrowAvrg < 0.02 || BinArray[j] / narrowAvrg > 3) return {\n              data: [],\n              correction: 0\n            };\n          }\n          for (j = 0; j < BinArray.length; j++) {\n            if (j === max[0][1]) {\n              tempBin.push(3);\n            } else if (j === max[1][1]) {\n              tempBin.push(2);\n            } else {\n              tempBin.push(1);\n            }\n          }\n          result.push(tempBin);\n        } else {\n          if (max[0][1] % 2 === max[1][1] % 2 && max[0][1] % 2 === max[2][1] % 2) {\n            var modMem = max[0][1] % 2;\n            max[2] = [0, 0];\n            for (j = 0; j < BinArray.length; j++) {\n              if (j % 2 === modMem) continue;\n              if (BinArray[j] > max[2][0]) {\n                max[2][0] = BinArray[j];\n                max[2][1] = j;\n              }\n            }\n          }\n          wideAvrg = max[0][0] + max[1][0] + max[2][0];\n          wideAvrg /= 3;\n          for (j = 0; j < max.length; j++) {\n            if (max[j][0] / wideAvrg < 0.02 || max[j][0] / wideAvrg > 3) return {\n              data: [],\n              correction: 0\n            };\n          }\n          var narrow = 0;\n          for (j = 0; j < BinArray.length; j++) {\n            if (j === max[0][1] || j === max[1][1] || j === max[2][1]) continue;\n            narrow = BinArray[j];\n          }\n          if (wideAvrg / narrow < 0.02 || wideAvrg / narrow > 3) return {\n            data: [],\n            correction: 0\n          };\n          for (j = 0; j < BinArray.length; j++) {\n            if (j === max[0][1] || j === max[1][1] || j === max[2][1]) {\n              tempBin.push(2);\n            } else {\n              tempBin.push(1);\n            }\n          }\n          result.push(tempBin);\n        }\n        for (j = 0; j < tempBin.length; j++) {\n          testData += Math.abs(tempBin[j] - (BinArray[j] / sum) * total);\n        }\n        continue;\n      }\n      counter = 0;\n      while (counter < totalBars) {\n        tempBin.push((BinArray[counter] / sum) * total);\n        counter++;\n      }\n      counter = 0;\n      while (counter < totalBars) {\n        tempBin[counter] = tempBin[counter] > maxLength ? maxLength : tempBin[counter];\n        tempBin[counter] = tempBin[counter] < 1 ? 1 : tempBin[counter];\n        tempBin[counter] = Math.round(tempBin[counter]);\n        counter++;\n      }\n      if (type === 3) {\n        var checking = 0;\n        for (i = 0; i < tempBin.length; i++) {\n          checking += tempBin[i];\n        }\n        if (checking > 7) {\n          max = 0;\n          var hitIndex = 0;\n          for (i = 0; i < tempBin.length; i++) {\n            if (tempBin[i] > max) {\n              max = tempBin[i];\n              hitIndex = i;\n            }\n          }\n          tempBin[hitIndex] = max - (checking - 7);\n        }\n      }\n      if (type === 3) {\n        for (i = 0; i < tempBin.length; i++) {\n          testData += Math.abs(tempBin[i] - (BinArray[i] / sum) * total);\n        }\n      }\n      result.push(tempBin);\n    }\n    if (type === 3) {\n      return {\n        data: result,\n        correction: testData\n      };\n    } else {\n      return result;\n    }\n  }\n\n  function CheckCode128(string) {\n    var checksum = string[string.length - 2].join(\"\");\n    var i;\n    checksum = Code128Encoding.value.indexOf(checksum);\n    if (checksum === -1) return false;\n    var summarizer = Code128Encoding.value.indexOf(string[0].join(\"\"));\n    if (summarizer === -1) return false;\n    var startChar = Code128Encoding[string[0].join(\"\")];\n    if (typeof startChar === 'undefined') return false;\n    if (startChar !== \"A\" && startChar !== \"B\" && startChar !== \"C\") return false;\n    for (i = 1; i < (string.length - 2); i++) {\n      summarizer += Code128Encoding.value.indexOf(string[i].join(\"\")) * i;\n      if (Code128Encoding.value.indexOf(string[i].join(\"\")) === -1) return false;\n    }\n    return (summarizer % 103 === checksum);\n  }\n\n  function Decode2Of5(string) {\n    var result = \"\";\n    var i;\n    for (i = 0; i < string.length; i++) {\n      if (TwoOfFiveEncoding.indexOf(string[i].join(\"\")) === -1) return false;\n      result += TwoOfFiveEncoding.indexOf(string[i].join(\"\"));\n    }\n    return result;\n  }\n\n  function DecodeCodaBar(string) {\n    var result = \"\";\n    var start = string[0].join(\"\");\n    var end = string[string.length - 1].join(\"\");\n    var i;\n    if (!(CodaBarEncoding[start] === \"A\" || CodaBarEncoding[start] === \"B\" || CodaBarEncoding[start] === \"C\" || CodaBarEncoding[start] === \"D\")) return false;\n    if (!(CodaBarEncoding[end] === \"A\" || CodaBarEncoding[end] === \"B\" || CodaBarEncoding[end] === \"C\" || CodaBarEncoding[end] === \"D\")) return false;\n    for (i = 1; i < string.length - 1; i++) {\n      if (typeof CodaBarEncoding[string[i].join(\"\")] === 'undefined') return false;\n      result += CodaBarEncoding[string[i].join(\"\")];\n    }\n    return result;\n  }\n\n  function DecodeEAN13(string) {\n    if (string.length !== 12) return false;\n    var leftSide = string.slice(0, 6);\n    var trigger = false;\n    var rightSide = string.slice(6, string.length);\n    var i;\n    for (i = 0; i < leftSide.length; i++) {\n      leftSide[i] = leftSide[i].join(\"\");\n      if (leftSide[i].length !== 4) {\n        trigger = true;\n        break;\n      }\n    }\n    if (trigger) return false;\n    for (i = 0; i < rightSide.length; i++) {\n      rightSide[i] = rightSide[i].join(\"\");\n      if (rightSide[i].length !== 4) {\n        trigger = true;\n        break;\n      }\n    }\n    if (trigger) return false;\n    var decodeFormat = [];\n    for (i = 0; i < leftSide.length; i++) {\n      if (typeof EAN13Encoding.L[leftSide[i]] !== 'undefined') {\n        decodeFormat.push(\"L\");\n      } else if (typeof EAN13Encoding.G[leftSide[i]] !== 'undefined') {\n        decodeFormat.push(\"G\");\n      } else {\n        trigger = true;\n        break;\n      }\n    }\n    if (trigger) return false;\n    var resultArray = [];\n    if (typeof EAN13Encoding.formats[decodeFormat.join(\"\")] === 'undefined') return false;\n    resultArray.push(EAN13Encoding.formats[decodeFormat.join(\"\")]);\n    for (i = 0; i < leftSide.length; i++) {\n      if (typeof EAN13Encoding[decodeFormat[i]][leftSide[i]] === 'undefined') {\n        trigger = true;\n        break;\n      }\n      resultArray.push(EAN13Encoding[decodeFormat[i]][leftSide[i]]);\n    }\n    if (trigger) return false;\n    for (i = 0; i < rightSide.length; i++) {\n      if (typeof EAN13Encoding.R[rightSide[i]] === 'undefined') {\n        trigger = true;\n        break;\n      }\n      resultArray.push(EAN13Encoding.R[rightSide[i]]);\n    }\n    if (trigger) return false;\n    var weight = 3;\n    var sum = 0;\n    for (i = resultArray.length - 2; i >= 0; i--) {\n      sum += resultArray[i] * weight;\n      if (weight === 3) {\n        weight = 1;\n      } else {\n        weight = 3;\n      }\n    }\n    sum = (10 - sum % 10) % 10;\n    if (resultArray[resultArray.length - 1] === sum) {\n      return resultArray.join(\"\");\n    } else {\n      return false;\n    }\n  }\n\n  function CheckCode93(string) {\n    var checkOne = string[string.length - 3].join(\"\");\n    var checkTwo = string[string.length - 2].join(\"\");\n    var failSafe = true;\n    if (typeof Code93Encoding[checkOne] === 'undefined') return false;\n    if (typeof Code93Encoding[checkTwo] === 'undefined') return false;\n    var checkSum = Code93Encoding[checkOne].value;\n    var weight = 1;\n    var sum = 0;\n    var i;\n    for (i = string.length - 4; i > 0; i--) {\n      failSafe = typeof Code93Encoding[string[i].join(\"\")] === 'undefined' ? false : failSafe;\n      if (!failSafe) break;\n      sum += Code93Encoding[string[i].join(\"\")].value * weight;\n      weight++;\n      if (weight > 20) weight = 1;\n    }\n    var firstCheck = sum % 47;\n    var firstBool = firstCheck === checkSum;\n    if (!firstBool) return false;\n    if (!failSafe) return false;\n    sum = firstCheck;\n    weight = 2;\n    checkSum = Code93Encoding[checkTwo].value;\n    for (i = string.length - 4; i > 0; i--) {\n      failSafe = typeof Code93Encoding[string[i].join(\"\")] === 'undefined' ? false : failSafe;\n      if (!failSafe) break;\n      sum += Code93Encoding[string[i].join(\"\")].value * weight;\n      weight++;\n      if (weight > 15) weight = 1;\n    }\n    var secondCheck = sum % 47;\n    var secondBool = secondCheck === checkSum;\n    return secondBool && firstBool;\n  }\n\n  function CheckCode39(string) {\n    var trigger = true;\n    if (typeof Code39Encoding[string[0].join(\"\")] === 'undefined') return false;\n    if (Code39Encoding[string[0].join(\"\")].character !== \"*\") return false;\n    if (typeof Code39Encoding[string[string.length - 1].join(\"\")] === 'undefined') return false;\n    if (Code39Encoding[string[string.length - 1].join(\"\")].character !== \"*\") return false;\n    for (i = 1; i < string.length - 1; i++) {\n      if (typeof Code39Encoding[string[i].join(\"\")] === 'undefined') {\n        trigger = false;\n        break;\n      }\n    }\n    return trigger;\n  }\n\n  function DecodeCode39(string) {\n    var resultString = \"\";\n    var special = false;\n    var character = \"\";\n    var specialchar = \"\";\n    for (i = 1; i < string.length - 1; i++) {\n      character = Code39Encoding[string[i].join(\"\")].character;\n      if (character === \"$\" || character === \"/\" || character === \"+\" || character === \"%\") {\n        // if next character exists => this a special character\n        if (i + 1 < string.length - 1) {\n          special = true;\n          specialchar = character;\n          continue;\n        }\n      }\n      if (special) {\n        if (typeof ExtendedEncoding[specialchar + character] === 'undefined') {} else {\n          resultString += ExtendedEncoding[specialchar + character];\n        }\n        special = false;\n        continue;\n      }\n      resultString += character;\n    }\n    return resultString;\n  }\n\n  function DecodeCode93(string) {\n    var resultString = \"\";\n    var special = false;\n    var character = \"\";\n    var specialchar = \"\";\n    for (i = 1; i < string.length - 3; i++) {\n      character = Code93Encoding[string[i].join(\"\")].character;\n      if (character === \"($)\" || character === \"(/)\" || character === \"(+)\" || character === \"(%)\") {\n        special = true;\n        specialchar = character[1];\n        continue;\n      }\n      if (special) {\n        if (typeof ExtendedEncoding[specialchar + character] === 'undefined') {} else {\n          resultString += ExtendedEncoding[specialchar + character];\n        }\n        special = false;\n        continue;\n      }\n      resultString += character;\n    }\n    return resultString;\n  }\n\n  function DecodeCode128(string) {\n    var set = Code128Encoding[string[0].join(\"\")];\n    var symbol;\n    var Code128Format = \"Code128\";\n    var resultString = \"\";\n    var i;\n    for (i = 1; i < (string.length - 2); i++) {\n      symbol = Code128Encoding[string[i].join(\"\")][set];\n      switch (symbol) {\n        case \"FNC1\":\n          if (i === 1) Code128Format = \"GS1-128\";\n          break;\n        case \"FNC2\":\n        case \"FNC3\":\n        case \"FNC4\":\n          break;\n        case \"SHIFT_B\":\n          i++;\n          resultString += Code128Encoding[string[i].join(\"\")].B;\n          break;\n        case \"SHIFT_A\":\n          i++;\n          resultString += Code128Encoding[string[i].join(\"\")].A;\n          break;\n        case \"Code_A\":\n          set = \"A\";\n          break;\n        case \"Code_B\":\n          set = \"B\";\n          break;\n        case \"Code_C\":\n          set = \"C\";\n          break;\n        default:\n          resultString += symbol;\n      }\n    }\n    return {\n      string: resultString,\n      format: Code128Format\n    };\n  }\n  TwoOfFiveEncoding = [\"00110\", \"10001\", \"01001\", \"11000\", \"00101\", \"10100\", \"01100\", \"00011\", \"10010\", \"01010\"];\n  Code128Encoding = {\n    \"212222\": {\n      A: \" \",\n      B: \" \",\n      C: \"00\"\n    },\n    \"222122\": {\n      A: \"!\",\n      B: \"!\",\n      C: \"01\"\n    },\n    \"222221\": {\n      A: '\"',\n      B: '\"',\n      C: \"02\"\n    },\n    \"121223\": {\n      A: \"#\",\n      B: \"#\",\n      C: \"03\"\n    },\n    \"121322\": {\n      A: \"$\",\n      B: \"$\",\n      C: \"04\"\n    },\n    \"131222\": {\n      A: \"%\",\n      B: \"%\",\n      C: \"05\"\n    },\n    \"122213\": {\n      A: \"&\",\n      B: \"&\",\n      C: \"06\"\n    },\n    \"122312\": {\n      A: \"'\",\n      B: \"'\",\n      C: \"07\"\n    },\n    \"132212\": {\n      A: \"(\",\n      B: \"(\",\n      C: \"08\"\n    },\n    \"221213\": {\n      A: \")\",\n      B: \")\",\n      C: \"09\"\n    },\n    \"221312\": {\n      A: \"*\",\n      B: \"*\",\n      C: \"10\"\n    },\n    \"231212\": {\n      A: \"+\",\n      B: \"+\",\n      C: \"11\"\n    },\n    \"112232\": {\n      A: \",\",\n      B: \",\",\n      C: \"12\"\n    },\n    \"122132\": {\n      A: \"-\",\n      B: \"-\",\n      C: \"13\"\n    },\n    \"122231\": {\n      A: \".\",\n      B: \".\",\n      C: \"14\"\n    },\n    \"113222\": {\n      A: \"/\",\n      B: \"/\",\n      C: \"15\"\n    },\n    \"123122\": {\n      A: \"0\",\n      B: \"0\",\n      C: \"16\"\n    },\n    \"123221\": {\n      A: \"1\",\n      B: \"1\",\n      C: \"17\"\n    },\n    \"223211\": {\n      A: \"2\",\n      B: \"2\",\n      C: \"18\"\n    },\n    \"221132\": {\n      A: \"3\",\n      B: \"3\",\n      C: \"19\"\n    },\n    \"221231\": {\n      A: \"4\",\n      B: \"4\",\n      C: \"20\"\n    },\n    \"213212\": {\n      A: \"5\",\n      B: \"5\",\n      C: \"21\"\n    },\n    \"223112\": {\n      A: \"6\",\n      B: \"6\",\n      C: \"22\"\n    },\n    \"312131\": {\n      A: \"7\",\n      B: \"7\",\n      C: \"23\"\n    },\n    \"311222\": {\n      A: \"8\",\n      B: \"8\",\n      C: \"24\"\n    },\n    \"321122\": {\n      A: \"9\",\n      B: \"9\",\n      C: \"25\"\n    },\n    \"321221\": {\n      A: \":\",\n      B: \":\",\n      C: \"26\"\n    },\n    \"312212\": {\n      A: \";\",\n      B: \";\",\n      C: \"27\"\n    },\n    \"322112\": {\n      A: \"<\",\n      B: \"<\",\n      C: \"28\"\n    },\n    \"322211\": {\n      A: \"=\",\n      B: \"=\",\n      C: \"29\"\n    },\n    \"212123\": {\n      A: \">\",\n      B: \">\",\n      C: \"30\"\n    },\n    \"212321\": {\n      A: \"?\",\n      B: \"?\",\n      C: \"31\"\n    },\n    \"232121\": {\n      A: \"@\",\n      B: \"@\",\n      C: \"32\"\n    },\n    \"111323\": {\n      A: \"A\",\n      B: \"A\",\n      C: \"33\"\n    },\n    \"131123\": {\n      A: \"B\",\n      B: \"B\",\n      C: \"34\"\n    },\n    \"131321\": {\n      A: \"C\",\n      B: \"C\",\n      C: \"35\"\n    },\n    \"112313\": {\n      A: \"D\",\n      B: \"D\",\n      C: \"36\"\n    },\n    \"132113\": {\n      A: \"E\",\n      B: \"E\",\n      C: \"37\"\n    },\n    \"132311\": {\n      A: \"F\",\n      B: \"F\",\n      C: \"38\"\n    },\n    \"211313\": {\n      A: \"G\",\n      B: \"G\",\n      C: \"39\"\n    },\n    \"231113\": {\n      A: \"H\",\n      B: \"H\",\n      C: \"40\"\n    },\n    \"231311\": {\n      A: \"I\",\n      B: \"I\",\n      C: \"41\"\n    },\n    \"112133\": {\n      A: \"J\",\n      B: \"J\",\n      C: \"42\"\n    },\n    \"112331\": {\n      A: \"K\",\n      B: \"K\",\n      C: \"43\"\n    },\n    \"132131\": {\n      A: \"L\",\n      B: \"L\",\n      C: \"44\"\n    },\n    \"113123\": {\n      A: \"M\",\n      B: \"M\",\n      C: \"45\"\n    },\n    \"113321\": {\n      A: \"N\",\n      B: \"N\",\n      C: \"46\"\n    },\n    \"133121\": {\n      A: \"O\",\n      B: \"O\",\n      C: \"47\"\n    },\n    \"313121\": {\n      A: \"P\",\n      B: \"P\",\n      C: \"48\"\n    },\n    \"211331\": {\n      A: \"Q\",\n      B: \"Q\",\n      C: \"49\"\n    },\n    \"231131\": {\n      A: \"R\",\n      B: \"R\",\n      C: \"50\"\n    },\n    \"213113\": {\n      A: \"S\",\n      B: \"S\",\n      C: \"51\"\n    },\n    \"213311\": {\n      A: \"T\",\n      B: \"T\",\n      C: \"52\"\n    },\n    \"213131\": {\n      A: \"U\",\n      B: \"U\",\n      C: \"53\"\n    },\n    \"311123\": {\n      A: \"V\",\n      B: \"V\",\n      C: \"54\"\n    },\n    \"311321\": {\n      A: \"W\",\n      B: \"W\",\n      C: \"55\"\n    },\n    \"331121\": {\n      A: \"X\",\n      B: \"X\",\n      C: \"56\"\n    },\n    \"312113\": {\n      A: \"Y\",\n      B: \"Y\",\n      C: \"57\"\n    },\n    \"312311\": {\n      A: \"Z\",\n      B: \"Z\",\n      C: \"58\"\n    },\n    \"332111\": {\n      A: \"[\",\n      B: \"[\",\n      C: \"59\"\n    },\n    \"314111\": {\n      A: \"\\\\\",\n      B: \"\\\\\",\n      C: \"60\"\n    },\n    \"221411\": {\n      A: \"]\",\n      B: \"]\",\n      C: \"61\"\n    },\n    \"431111\": {\n      A: \"^\",\n      B: \"^\",\n      C: \"62\"\n    },\n    \"111224\": {\n      A: \"_\",\n      B: \"_\",\n      C: \"63\"\n    },\n    \"111422\": {\n      A: \"NUL\",\n      B: \"`\",\n      C: \"64\"\n    },\n    \"121124\": {\n      A: \"SOH\",\n      B: \"a\",\n      C: \"65\"\n    },\n    \"121421\": {\n      A: \"STX\",\n      B: \"b\",\n      C: \"66\"\n    },\n    \"141122\": {\n      A: \"ETX\",\n      B: \"c\",\n      C: \"67\"\n    },\n    \"141221\": {\n      A: \"EOT\",\n      B: \"d\",\n      C: \"68\"\n    },\n    \"112214\": {\n      A: \"ENQ\",\n      B: \"e\",\n      C: \"69\"\n    },\n    \"112412\": {\n      A: \"ACK\",\n      B: \"f\",\n      C: \"70\"\n    },\n    \"122114\": {\n      A: \"BEL\",\n      B: \"g\",\n      C: \"71\"\n    },\n    \"122411\": {\n      A: \"BS\",\n      B: \"h\",\n      C: \"72\"\n    },\n    \"142112\": {\n      A: \"HT\",\n      B: \"i\",\n      C: \"73\"\n    },\n    \"142211\": {\n      A: \"LF\",\n      B: \"j\",\n      C: \"74\"\n    },\n    \"241211\": {\n      A: \"VT\",\n      B: \"k\",\n      C: \"75\"\n    },\n    \"221114\": {\n      A: \"FF\",\n      B: \"l\",\n      C: \"76\"\n    },\n    \"413111\": {\n      A: \"CR\",\n      B: \"m\",\n      C: \"77\"\n    },\n    \"241112\": {\n      A: \"SO\",\n      B: \"n\",\n      C: \"78\"\n    },\n    \"134111\": {\n      A: \"SI\",\n      B: \"o\",\n      C: \"79\"\n    },\n    \"111242\": {\n      A: \"DLE\",\n      B: \"p\",\n      C: \"80\"\n    },\n    \"121142\": {\n      A: \"DC1\",\n      B: \"q\",\n      C: \"81\"\n    },\n    \"121241\": {\n      A: \"DC2\",\n      B: \"r\",\n      C: \"82\"\n    },\n    \"114212\": {\n      A: \"DC3\",\n      B: \"s\",\n      C: \"83\"\n    },\n    \"124112\": {\n      A: \"DC4\",\n      B: \"t\",\n      C: \"84\"\n    },\n    \"124211\": {\n      A: \"NAK\",\n      B: \"u\",\n      C: \"85\"\n    },\n    \"411212\": {\n      A: \"SYN\",\n      B: \"v\",\n      C: \"86\"\n    },\n    \"421112\": {\n      A: \"ETB\",\n      B: \"w\",\n      C: \"87\"\n    },\n    \"421211\": {\n      A: \"CAN\",\n      B: \"x\",\n      C: \"88\"\n    },\n    \"212141\": {\n      A: \"EM\",\n      B: \"y\",\n      C: \"89\"\n    },\n    \"214121\": {\n      A: \"SUB\",\n      B: \"z\",\n      C: \"90\"\n    },\n    \"412121\": {\n      A: \"ESC\",\n      B: \"{\",\n      C: \"91\"\n    },\n    \"111143\": {\n      A: \"FS\",\n      B: \"|\",\n      C: \"92\"\n    },\n    \"111341\": {\n      A: \"GS\",\n      B: \"}\",\n      C: \"93\"\n    },\n    \"131141\": {\n      A: \"RS\",\n      B: \"~\",\n      C: \"94\"\n    },\n    \"114113\": {\n      A: \"US\",\n      B: \"DEL\",\n      C: \"95\"\n    },\n    \"114311\": {\n      A: \"FNC3\",\n      B: \"FNC3\",\n      C: \"96\"\n    },\n    \"411113\": {\n      A: \"FNC2\",\n      B: \"FNC2\",\n      C: \"97\"\n    },\n    \"411311\": {\n      A: \"SHIFT_B\",\n      B: \"SHIFT_A\",\n      C: \"98\"\n    },\n    \"113141\": {\n      A: \"Code_C\",\n      B: \"Code_C\",\n      C: \"99\"\n    },\n    \"114131\": {\n      A: \"Code_B\",\n      B: \"FNC4\",\n      C: \"Code_B\"\n    },\n    \"311141\": {\n      A: \"FNC4\",\n      B: \"Code_A\",\n      C: \"Code_A\"\n    },\n    \"411131\": {\n      A: \"FNC1\",\n      B: \"FNC1\",\n      C: \"FNC1\"\n    },\n    \"211412\": \"A\",\n    \"211214\": \"B\",\n    \"211232\": \"C\",\n    \"233111\": {\n      A: \"STOP\",\n      B: \"STOP\",\n      C: \"STOP\"\n    },\n    value: [\n      \"212222\",\n      \"222122\",\n      \"222221\",\n      \"121223\",\n      \"121322\",\n      \"131222\",\n      \"122213\",\n      \"122312\",\n      \"132212\",\n      \"221213\",\n      \"221312\",\n      \"231212\",\n      \"112232\",\n      \"122132\",\n      \"122231\",\n      \"113222\",\n      \"123122\",\n      \"123221\",\n      \"223211\",\n      \"221132\",\n      \"221231\",\n      \"213212\",\n      \"223112\",\n      \"312131\",\n      \"311222\",\n      \"321122\",\n      \"321221\",\n      \"312212\",\n      \"322112\",\n      \"322211\",\n      \"212123\",\n      \"212321\",\n      \"232121\",\n      \"111323\",\n      \"131123\",\n      \"131321\",\n      \"112313\",\n      \"132113\",\n      \"132311\",\n      \"211313\",\n      \"231113\",\n      \"231311\",\n      \"112133\",\n      \"112331\",\n      \"132131\",\n      \"113123\",\n      \"113321\",\n      \"133121\",\n      \"313121\",\n      \"211331\",\n      \"231131\",\n      \"213113\",\n      \"213311\",\n      \"213131\",\n      \"311123\",\n      \"311321\",\n      \"331121\",\n      \"312113\",\n      \"312311\",\n      \"332111\",\n      \"314111\",\n      \"221411\",\n      \"431111\",\n      \"111224\",\n      \"111422\",\n      \"121124\",\n      \"121421\",\n      \"141122\",\n      \"141221\",\n      \"112214\",\n      \"112412\",\n      \"122114\",\n      \"122411\",\n      \"142112\",\n      \"142211\",\n      \"241211\",\n      \"221114\",\n      \"413111\",\n      \"241112\",\n      \"134111\",\n      \"111242\",\n      \"121142\",\n      \"121241\",\n      \"114212\",\n      \"124112\",\n      \"124211\",\n      \"411212\",\n      \"421112\",\n      \"421211\",\n      \"212141\",\n      \"214121\",\n      \"412121\",\n      \"111143\",\n      \"111341\",\n      \"131141\",\n      \"114113\",\n      \"114311\",\n      \"411113\",\n      \"411311\",\n      \"113141\",\n      \"114131\",\n      \"311141\",\n      \"411131\",\n      \"211412\",\n      \"211214\",\n      \"211232\",\n      \"233111\"\n    ]\n  };\n\n  Code93Encoding = {\n    \"131112\": {\n      value: 0,\n      character: \"0\"\n    },\n    \"111213\": {\n      value: 1,\n      character: \"1\"\n    },\n    \"111312\": {\n      value: 2,\n      character: \"2\"\n    },\n    \"111411\": {\n      value: 3,\n      character: \"3\"\n    },\n    \"121113\": {\n      value: 4,\n      character: \"4\"\n    },\n    \"121212\": {\n      value: 5,\n      character: \"5\"\n    },\n    \"121311\": {\n      value: 6,\n      character: \"6\"\n    },\n    \"111114\": {\n      value: 7,\n      character: \"7\"\n    },\n    \"131211\": {\n      value: 8,\n      character: \"8\"\n    },\n    \"141111\": {\n      value: 9,\n      character: \"9\"\n    },\n    \"211113\": {\n      value: 10,\n      character: \"A\"\n    },\n    \"211212\": {\n      value: 11,\n      character: \"B\"\n    },\n    \"211311\": {\n      value: 12,\n      character: \"C\"\n    },\n    \"221112\": {\n      value: 13,\n      character: \"D\"\n    },\n    \"221211\": {\n      value: 14,\n      character: \"E\"\n    },\n    \"231111\": {\n      value: 15,\n      character: \"F\"\n    },\n    \"112113\": {\n      value: 16,\n      character: \"G\"\n    },\n    \"112212\": {\n      value: 17,\n      character: \"H\"\n    },\n    \"112311\": {\n      value: 18,\n      character: \"I\"\n    },\n    \"122112\": {\n      value: 19,\n      character: \"J\"\n    },\n    \"132111\": {\n      value: 20,\n      character: \"K\"\n    },\n    \"111123\": {\n      value: 21,\n      character: \"L\"\n    },\n    \"111222\": {\n      value: 22,\n      character: \"M\"\n    },\n    \"111321\": {\n      value: 23,\n      character: \"N\"\n    },\n    \"121122\": {\n      value: 24,\n      character: \"O\"\n    },\n    \"131121\": {\n      value: 25,\n      character: \"P\"\n    },\n    \"212112\": {\n      value: 26,\n      character: \"Q\"\n    },\n    \"212211\": {\n      value: 27,\n      character: \"R\"\n    },\n    \"211122\": {\n      value: 28,\n      character: \"S\"\n    },\n    \"211221\": {\n      value: 29,\n      character: \"T\"\n    },\n    \"221121\": {\n      value: 30,\n      character: \"U\"\n    },\n    \"222111\": {\n      value: 31,\n      character: \"V\"\n    },\n    \"112122\": {\n      value: 32,\n      character: \"W\"\n    },\n    \"112221\": {\n      value: 33,\n      character: \"X\"\n    },\n    \"122121\": {\n      value: 34,\n      character: \"Y\"\n    },\n    \"123111\": {\n      value: 35,\n      character: \"Z\"\n    },\n    \"121131\": {\n      value: 36,\n      character: \"-\"\n    },\n    \"311112\": {\n      value: 37,\n      character: \".\"\n    },\n    \"311211\": {\n      value: 38,\n      character: \" \"\n    },\n    \"321111\": {\n      value: 39,\n      character: \"$\"\n    },\n    \"112131\": {\n      value: 40,\n      character: \"/\"\n    },\n    \"113121\": {\n      value: 41,\n      character: \"+\"\n    },\n    \"211131\": {\n      value: 42,\n      character: \"%\"\n    },\n    \"121221\": {\n      value: 43,\n      character: \"($)\"\n    },\n    \"312111\": {\n      value: 44,\n      character: \"(%)\"\n    },\n    \"311121\": {\n      value: 45,\n      character: \"(/)\"\n    },\n    \"122211\": {\n      value: 46,\n      character: \"(+)\"\n    },\n    \"111141\": {\n      value: -1,\n      character: \"*\"\n    }\n  };\n  Code39Encoding = {\n    \"111221211\": {\n      value: 0,\n      character: \"0\"\n    },\n    \"211211112\": {\n      value: 1,\n      character: \"1\"\n    },\n    \"112211112\": {\n      value: 2,\n      character: \"2\"\n    },\n    \"212211111\": {\n      value: 3,\n      character: \"3\"\n    },\n    \"111221112\": {\n      value: 4,\n      character: \"4\"\n    },\n    \"211221111\": {\n      value: 5,\n      character: \"5\"\n    },\n    \"112221111\": {\n      value: 6,\n      character: \"6\"\n    },\n    \"111211212\": {\n      value: 7,\n      character: \"7\"\n    },\n    \"211211211\": {\n      value: 8,\n      character: \"8\"\n    },\n    \"112211211\": {\n      value: 9,\n      character: \"9\"\n    },\n    \"211112112\": {\n      value: 10,\n      character: \"A\"\n    },\n    \"112112112\": {\n      value: 11,\n      character: \"B\"\n    },\n    \"212112111\": {\n      value: 12,\n      character: \"C\"\n    },\n    \"111122112\": {\n      value: 13,\n      character: \"D\"\n    },\n    \"211122111\": {\n      value: 14,\n      character: \"E\"\n    },\n    \"112122111\": {\n      value: 15,\n      character: \"F\"\n    },\n    \"111112212\": {\n      value: 16,\n      character: \"G\"\n    },\n    \"211112211\": {\n      value: 17,\n      character: \"H\"\n    },\n    \"112112211\": {\n      value: 18,\n      character: \"I\"\n    },\n    \"111122211\": {\n      value: 19,\n      character: \"J\"\n    },\n    \"211111122\": {\n      value: 20,\n      character: \"K\"\n    },\n    \"112111122\": {\n      value: 21,\n      character: \"L\"\n    },\n    \"212111121\": {\n      value: 22,\n      character: \"M\"\n    },\n    \"111121122\": {\n      value: 23,\n      character: \"N\"\n    },\n    \"211121121\": {\n      value: 24,\n      character: \"O\"\n    },\n    \"112121121\": {\n      value: 25,\n      character: \"P\"\n    },\n    \"111111222\": {\n      value: 26,\n      character: \"Q\"\n    },\n    \"211111221\": {\n      value: 27,\n      character: \"R\"\n    },\n    \"112111221\": {\n      value: 28,\n      character: \"S\"\n    },\n    \"111121221\": {\n      value: 29,\n      character: \"T\"\n    },\n    \"221111112\": {\n      value: 30,\n      character: \"U\"\n    },\n    \"122111112\": {\n      value: 31,\n      character: \"V\"\n    },\n    \"222111111\": {\n      value: 32,\n      character: \"W\"\n    },\n    \"121121112\": {\n      value: 33,\n      character: \"X\"\n    },\n    \"221121111\": {\n      value: 34,\n      character: \"Y\"\n    },\n    \"122121111\": {\n      value: 35,\n      character: \"Z\"\n    },\n    \"121111212\": {\n      value: 36,\n      character: \"-\"\n    },\n    \"221111211\": {\n      value: 37,\n      character: \".\"\n    },\n    \"122111211\": {\n      value: 38,\n      character: \" \"\n    },\n    \"121212111\": {\n      value: 39,\n      character: \"$\"\n    },\n    \"121211121\": {\n      value: 40,\n      character: \"/\"\n    },\n    \"121112121\": {\n      value: 41,\n      character: \"+\"\n    },\n    \"111212121\": {\n      value: 42,\n      character: \"%\"\n    },\n    \"121121211\": {\n      value: -1,\n      character: \"*\"\n    }\n  };\n\n  ExtendedEncoding = {\n    \"/A\": '!',\n    \"/B\": '\"',\n    \"/C\": '#',\n    \"/D\": '$',\n    \"/E\": '%',\n    \"/F\": '&',\n    \"/G\": \"'\",\n    \"/H\": '(',\n    \"/I\": ')',\n    \"/J\": '*',\n    \"/K\": '+',\n    \"/L\": ',',\n    \"/O\": '/',\n    \"/Z\": ':',\n    \"%F\": ';',\n    \"%G\": '<',\n    \"%H\": '=',\n    \"%I\": '>',\n    \"%J\": '?',\n    \"%K\": '[',\n    \"%L\": \"\\\\\",\n    \"%M\": ']',\n    \"%N\": '^',\n    \"%O\": '_',\n    \"+A\": 'a',\n    \"+B\": 'b',\n    \"+C\": 'c',\n    \"+D\": 'd',\n    \"+E\": 'e',\n    \"+F\": 'f',\n    \"+G\": 'g',\n    \"+H\": 'h',\n    \"+I\": 'i',\n    \"+J\": 'j',\n    \"+K\": 'k',\n    \"+L\": 'l',\n    \"+M\": 'm',\n    \"+N\": 'n',\n    \"+O\": 'o',\n    \"+P\": 'p',\n    \"+Q\": 'q',\n    \"+R\": 'r',\n    \"+S\": 's',\n    \"+T\": 't',\n    \"+U\": 'u',\n    \"+V\": 'v',\n    \"+W\": 'w',\n    \"+X\": 'x',\n    \"+Y\": 'y',\n    \"+Z\": 'z',\n    \"%P\": \"{\",\n    \"%Q\": '|',\n    \"%R\": '|',\n    \"%S\": '~',\n  };\n\n  CodaBarEncoding = {\n    \"0000011\": \"0\",\n    \"0000110\": \"1\",\n    \"0001001\": \"2\",\n    \"1100000\": \"3\",\n    \"0010010\": \"4\",\n    \"1000010\": \"5\",\n    \"0100001\": \"6\",\n    \"0100100\": \"7\",\n    \"0110000\": \"8\",\n    \"1001000\": \"9\",\n    \"0001100\": \"-\",\n    \"0011000\": \"$\",\n    \"1000101\": \":\",\n    \"1010001\": \"/\",\n    \"1010100\": \".\",\n    \"0011111\": \"+\",\n    \"0011010\": \"A\",\n    \"0001011\": \"B\",\n    \"0101001\": \"C\",\n    \"0001110\": \"D\"\n  };\n\n  EAN13Encoding = {\n    \"L\": {\n      \"3211\": 0,\n      \"2221\": 1,\n      \"2122\": 2,\n      \"1411\": 3,\n      \"1132\": 4,\n      \"1231\": 5,\n      \"1114\": 6,\n      \"1312\": 7,\n      \"1213\": 8,\n      \"3112\": 9\n    },\n    \"G\": {\n      \"1123\": 0,\n      \"1222\": 1,\n      \"2212\": 2,\n      \"1141\": 3,\n      \"2311\": 4,\n      \"1321\": 5,\n      \"4111\": 6,\n      \"2131\": 7,\n      \"3121\": 8,\n      \"2113\": 9\n    },\n    \"R\": {\n      \"3211\": 0,\n      \"2221\": 1,\n      \"2122\": 2,\n      \"1411\": 3,\n      \"1132\": 4,\n      \"1231\": 5,\n      \"1114\": 6,\n      \"1312\": 7,\n      \"1213\": 8,\n      \"3112\": 9\n    },\n    formats: {\n      \"LLLLLL\": 0,\n      \"LLGLGG\": 1,\n      \"LLGGLG\": 2,\n      \"LLGGGL\": 3,\n      \"LGLLGG\": 4,\n      \"LGGLLG\": 5,\n      \"LGGGLL\": 6,\n      \"LGLGLG\": 7,\n      \"LGLGGL\": 8,\n      \"LGGLGL\": 9\n    }\n  };\n\n  self.onmessage = function(e) {\n    var width;\n    var i;\n\n    ScanImage = {\n      data: new Uint8ClampedArray(e.data.scan),\n      width: e.data.scanWidth,\n      height: e.data.scanHeight\n    };\n    switch (e.data.rotation) {\n      case 8:\n        ScanImage.data = Rotate(ScanImage.data, ScanImage.width, ScanImage.height, -90);\n        width = e.data.scanWidth;\n        ScanImage.width = ScanImage.height;\n        ScanImage.height = width;\n        break;\n      case 6:\n        ScanImage.data = Rotate(ScanImage.data, ScanImage.width, ScanImage.height, 90);\n        width = e.data.scanWidth;\n        ScanImage.width = ScanImage.height;\n        ScanImage.height = width;\n        break;\n      case 3:\n        ScanImage.data = Rotate(ScanImage.data, ScanImage.width, ScanImage.height, 180);\n    }\n    Image = {\n      data: Scale(ScanImage.data, ScanImage.width, ScanImage.height),\n      width: ScanImage.width / 2,\n      height: ScanImage.height / 2\n    };\n    if (e.data.postOrientation) {\n      postMessage({\n        result: Image,\n        success: \"orientationData\"\n      });\n    }\n    availableFormats = [\"Code128\", \"Code93\", \"Code39\", \"EAN-13\", \"2Of5\", \"Inter2Of5\", \"Codabar\"];\n    FormatPriority = [];\n    var decodeFormats = [\"Code128\", \"Code93\", \"Code39\", \"EAN-13\", \"2Of5\", \"Inter2Of5\", \"Codabar\"];\n    SecureCodabar = true;\n    Secure2Of5 = true;\n    Multiple = true;\n    if (typeof e.data.multiple !== 'undefined') {\n      Multiple = e.data.multiple;\n    }\n    if (typeof e.data.decodeFormats !== 'undefined') {\n      decodeFormats = e.data.decodeFormats;\n    }\n    for (i = 0; i < decodeFormats.length; i++) {\n      FormatPriority.push(decodeFormats[i]);\n    }\n    CreateTable();\n    CreateScanTable();\n    var FinalResult = Main();\n    if (FinalResult.length > 0) {\n      postMessage({\n        result: FinalResult,\n        success: true\n      });\n    } else {\n      postMessage({\n        result: FinalResult,\n        success: false\n      });\n    }\n  };\n};\n\nvar decoderWorkerBlobString = decoderWorkerBlob.toString();\ndecoderWorkerBlobString = decoderWorkerBlobString.substring(decoderWorkerBlobString.indexOf(\"{\")+1, decoderWorkerBlobString.lastIndexOf(\"}\"));\n\nif (true) {\n  if (typeof module !== 'undefined' && module.exports) {\n      exports = module.exports = decoderWorkerBlobString;\n  }\n  exports.decoderWorkerBlobString = decoderWorkerBlobString;\n} else {}\n\n//# sourceURL=webpack:///./src/js/DecoderWorker.js?");

/***/ }),

/***/ "./src/js/app.js":
/*!***********************!*\
  !*** ./src/js/app.js ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n\n\n//# sourceURL=webpack:///./src/js/app.js?");

/***/ }),

/***/ "./src/js/exif.js":
/*!************************!*\
  !*** ./src/js/exif.js ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function() {\n\n  var debug = false;\n\n  var root = this;\n\n  var EXIF = function(obj) {\n    if (obj instanceof EXIF) return obj;\n    if (!(this instanceof EXIF)) return new EXIF(obj);\n    this.EXIFwrapped = obj;\n  };\n\n  if (true) {\n    if (typeof module !== 'undefined' && module.exports) {\n      exports = module.exports = EXIF;\n    }\n    exports.EXIF = EXIF;\n  } else {}\n\n  var ExifTags = EXIF.Tags = {\n\n    // version tags\n    0x9000: \"ExifVersion\", // EXIF version\n    0xA000: \"FlashpixVersion\", // Flashpix format version\n\n    // colorspace tags\n    0xA001: \"ColorSpace\", // Color space information tag\n\n    // image configuration\n    0xA002: \"PixelXDimension\", // Valid width of meaningful image\n    0xA003: \"PixelYDimension\", // Valid height of meaningful image\n    0x9101: \"ComponentsConfiguration\", // Information about channels\n    0x9102: \"CompressedBitsPerPixel\", // Compressed bits per pixel\n\n    // user information\n    0x927C: \"MakerNote\", // Any desired information written by the manufacturer\n    0x9286: \"UserComment\", // Comments by user\n\n    // related file\n    0xA004: \"RelatedSoundFile\", // Name of related sound file\n\n    // date and time\n    0x9003: \"DateTimeOriginal\", // Date and time when the original image was generated\n    0x9004: \"DateTimeDigitized\", // Date and time when the image was stored digitally\n    0x9290: \"SubsecTime\", // Fractions of seconds for DateTime\n    0x9291: \"SubsecTimeOriginal\", // Fractions of seconds for DateTimeOriginal\n    0x9292: \"SubsecTimeDigitized\", // Fractions of seconds for DateTimeDigitized\n\n    // picture-taking conditions\n    0x829A: \"ExposureTime\", // Exposure time (in seconds)\n    0x829D: \"FNumber\", // F number\n    0x8822: \"ExposureProgram\", // Exposure program\n    0x8824: \"SpectralSensitivity\", // Spectral sensitivity\n    0x8827: \"ISOSpeedRatings\", // ISO speed rating\n    0x8828: \"OECF\", // Optoelectric conversion factor\n    0x9201: \"ShutterSpeedValue\", // Shutter speed\n    0x9202: \"ApertureValue\", // Lens aperture\n    0x9203: \"BrightnessValue\", // Value of brightness\n    0x9204: \"ExposureBias\", // Exposure bias\n    0x9205: \"MaxApertureValue\", // Smallest F number of lens\n    0x9206: \"SubjectDistance\", // Distance to subject in meters\n    0x9207: \"MeteringMode\", // Metering mode\n    0x9208: \"LightSource\", // Kind of light source\n    0x9209: \"Flash\", // Flash status\n    0x9214: \"SubjectArea\", // Location and area of main subject\n    0x920A: \"FocalLength\", // Focal length of the lens in mm\n    0xA20B: \"FlashEnergy\", // Strobe energy in BCPS\n    0xA20C: \"SpatialFrequencyResponse\", //\n    0xA20E: \"FocalPlaneXResolution\", // Number of pixels in width direction per FocalPlaneResolutionUnit\n    0xA20F: \"FocalPlaneYResolution\", // Number of pixels in height direction per FocalPlaneResolutionUnit\n    0xA210: \"FocalPlaneResolutionUnit\", // Unit for measuring FocalPlaneXResolution and FocalPlaneYResolution\n    0xA214: \"SubjectLocation\", // Location of subject in image\n    0xA215: \"ExposureIndex\", // Exposure index selected on camera\n    0xA217: \"SensingMethod\", // Image sensor type\n    0xA300: \"FileSource\", // Image source (3 == DSC)\n    0xA301: \"SceneType\", // Scene type (1 == directly photographed)\n    0xA302: \"CFAPattern\", // Color filter array geometric pattern\n    0xA401: \"CustomRendered\", // Special processing\n    0xA402: \"ExposureMode\", // Exposure mode\n    0xA403: \"WhiteBalance\", // 1 = auto white balance, 2 = manual\n    0xA404: \"DigitalZoomRation\", // Digital zoom ratio\n    0xA405: \"FocalLengthIn35mmFilm\", // Equivalent foacl length assuming 35mm film camera (in mm)\n    0xA406: \"SceneCaptureType\", // Type of scene\n    0xA407: \"GainControl\", // Degree of overall image gain adjustment\n    0xA408: \"Contrast\", // Direction of contrast processing applied by camera\n    0xA409: \"Saturation\", // Direction of saturation processing applied by camera\n    0xA40A: \"Sharpness\", // Direction of sharpness processing applied by camera\n    0xA40B: \"DeviceSettingDescription\", //\n    0xA40C: \"SubjectDistanceRange\", // Distance to subject\n\n    // other tags\n    0xA005: \"InteroperabilityIFDPointer\",\n    0xA420: \"ImageUniqueID\" // Identifier assigned uniquely to each image\n  };\n\n  var TiffTags = EXIF.TiffTags = {\n    0x0100: \"ImageWidth\",\n    0x0101: \"ImageHeight\",\n    0x8769: \"ExifIFDPointer\",\n    0x8825: \"GPSInfoIFDPointer\",\n    0xA005: \"InteroperabilityIFDPointer\",\n    0x0102: \"BitsPerSample\",\n    0x0103: \"Compression\",\n    0x0106: \"PhotometricInterpretation\",\n    0x0112: \"Orientation\",\n    0x0115: \"SamplesPerPixel\",\n    0x011C: \"PlanarConfiguration\",\n    0x0212: \"YCbCrSubSampling\",\n    0x0213: \"YCbCrPositioning\",\n    0x011A: \"XResolution\",\n    0x011B: \"YResolution\",\n    0x0128: \"ResolutionUnit\",\n    0x0111: \"StripOffsets\",\n    0x0116: \"RowsPerStrip\",\n    0x0117: \"StripByteCounts\",\n    0x0201: \"JPEGInterchangeFormat\",\n    0x0202: \"JPEGInterchangeFormatLength\",\n    0x012D: \"TransferFunction\",\n    0x013E: \"WhitePoint\",\n    0x013F: \"PrimaryChromaticities\",\n    0x0211: \"YCbCrCoefficients\",\n    0x0214: \"ReferenceBlackWhite\",\n    0x0132: \"DateTime\",\n    0x010E: \"ImageDescription\",\n    0x010F: \"Make\",\n    0x0110: \"Model\",\n    0x0131: \"Software\",\n    0x013B: \"Artist\",\n    0x8298: \"Copyright\"\n  };\n\n  var GPSTags = EXIF.GPSTags = {\n    0x0000: \"GPSVersionID\",\n    0x0001: \"GPSLatitudeRef\",\n    0x0002: \"GPSLatitude\",\n    0x0003: \"GPSLongitudeRef\",\n    0x0004: \"GPSLongitude\",\n    0x0005: \"GPSAltitudeRef\",\n    0x0006: \"GPSAltitude\",\n    0x0007: \"GPSTimeStamp\",\n    0x0008: \"GPSSatellites\",\n    0x0009: \"GPSStatus\",\n    0x000A: \"GPSMeasureMode\",\n    0x000B: \"GPSDOP\",\n    0x000C: \"GPSSpeedRef\",\n    0x000D: \"GPSSpeed\",\n    0x000E: \"GPSTrackRef\",\n    0x000F: \"GPSTrack\",\n    0x0010: \"GPSImgDirectionRef\",\n    0x0011: \"GPSImgDirection\",\n    0x0012: \"GPSMapDatum\",\n    0x0013: \"GPSDestLatitudeRef\",\n    0x0014: \"GPSDestLatitude\",\n    0x0015: \"GPSDestLongitudeRef\",\n    0x0016: \"GPSDestLongitude\",\n    0x0017: \"GPSDestBearingRef\",\n    0x0018: \"GPSDestBearing\",\n    0x0019: \"GPSDestDistanceRef\",\n    0x001A: \"GPSDestDistance\",\n    0x001B: \"GPSProcessingMethod\",\n    0x001C: \"GPSAreaInformation\",\n    0x001D: \"GPSDateStamp\",\n    0x001E: \"GPSDifferential\"\n  };\n\n  var StringValues = EXIF.StringValues = {\n    ExposureProgram: {\n      0: \"Not defined\",\n      1: \"Manual\",\n      2: \"Normal program\",\n      3: \"Aperture priority\",\n      4: \"Shutter priority\",\n      5: \"Creative program\",\n      6: \"Action program\",\n      7: \"Portrait mode\",\n      8: \"Landscape mode\"\n    },\n    MeteringMode: {\n      0: \"Unknown\",\n      1: \"Average\",\n      2: \"CenterWeightedAverage\",\n      3: \"Spot\",\n      4: \"MultiSpot\",\n      5: \"Pattern\",\n      6: \"Partial\",\n      255: \"Other\"\n    },\n    LightSource: {\n      0: \"Unknown\",\n      1: \"Daylight\",\n      2: \"Fluorescent\",\n      3: \"Tungsten (incandescent light)\",\n      4: \"Flash\",\n      9: \"Fine weather\",\n      10: \"Cloudy weather\",\n      11: \"Shade\",\n      12: \"Daylight fluorescent (D 5700 - 7100K)\",\n      13: \"Day white fluorescent (N 4600 - 5400K)\",\n      14: \"Cool white fluorescent (W 3900 - 4500K)\",\n      15: \"White fluorescent (WW 3200 - 3700K)\",\n      17: \"Standard light A\",\n      18: \"Standard light B\",\n      19: \"Standard light C\",\n      20: \"D55\",\n      21: \"D65\",\n      22: \"D75\",\n      23: \"D50\",\n      24: \"ISO studio tungsten\",\n      255: \"Other\"\n    },\n    Flash: {\n      0x0000: \"Flash did not fire\",\n      0x0001: \"Flash fired\",\n      0x0005: \"Strobe return light not detected\",\n      0x0007: \"Strobe return light detected\",\n      0x0009: \"Flash fired, compulsory flash mode\",\n      0x000D: \"Flash fired, compulsory flash mode, return light not detected\",\n      0x000F: \"Flash fired, compulsory flash mode, return light detected\",\n      0x0010: \"Flash did not fire, compulsory flash mode\",\n      0x0018: \"Flash did not fire, auto mode\",\n      0x0019: \"Flash fired, auto mode\",\n      0x001D: \"Flash fired, auto mode, return light not detected\",\n      0x001F: \"Flash fired, auto mode, return light detected\",\n      0x0020: \"No flash function\",\n      0x0041: \"Flash fired, red-eye reduction mode\",\n      0x0045: \"Flash fired, red-eye reduction mode, return light not detected\",\n      0x0047: \"Flash fired, red-eye reduction mode, return light detected\",\n      0x0049: \"Flash fired, compulsory flash mode, red-eye reduction mode\",\n      0x004D: \"Flash fired, compulsory flash mode, red-eye reduction mode, return light not detected\",\n      0x004F: \"Flash fired, compulsory flash mode, red-eye reduction mode, return light detected\",\n      0x0059: \"Flash fired, auto mode, red-eye reduction mode\",\n      0x005D: \"Flash fired, auto mode, return light not detected, red-eye reduction mode\",\n      0x005F: \"Flash fired, auto mode, return light detected, red-eye reduction mode\"\n    },\n    SensingMethod: {\n      1: \"Not defined\",\n      2: \"One-chip color area sensor\",\n      3: \"Two-chip color area sensor\",\n      4: \"Three-chip color area sensor\",\n      5: \"Color sequential area sensor\",\n      7: \"Trilinear sensor\",\n      8: \"Color sequential linear sensor\"\n    },\n    SceneCaptureType: {\n      0: \"Standard\",\n      1: \"Landscape\",\n      2: \"Portrait\",\n      3: \"Night scene\"\n    },\n    SceneType: {\n      1: \"Directly photographed\"\n    },\n    CustomRendered: {\n      0: \"Normal process\",\n      1: \"Custom process\"\n    },\n    WhiteBalance: {\n      0: \"Auto white balance\",\n      1: \"Manual white balance\"\n    },\n    GainControl: {\n      0: \"None\",\n      1: \"Low gain up\",\n      2: \"High gain up\",\n      3: \"Low gain down\",\n      4: \"High gain down\"\n    },\n    Contrast: {\n      0: \"Normal\",\n      1: \"Soft\",\n      2: \"Hard\"\n    },\n    Saturation: {\n      0: \"Normal\",\n      1: \"Low saturation\",\n      2: \"High saturation\"\n    },\n    Sharpness: {\n      0: \"Normal\",\n      1: \"Soft\",\n      2: \"Hard\"\n    },\n    SubjectDistanceRange: {\n      0: \"Unknown\",\n      1: \"Macro\",\n      2: \"Close view\",\n      3: \"Distant view\"\n    },\n    FileSource: {\n      3: \"DSC\"\n    },\n\n    Components: {\n      0: \"\",\n      1: \"Y\",\n      2: \"Cb\",\n      3: \"Cr\",\n      4: \"R\",\n      5: \"G\",\n      6: \"B\"\n    }\n  };\n\n  function addEvent(element, event, handler) {\n    if (element.addEventListener) {\n      element.addEventListener(event, handler, false);\n    } else if (element.attachEvent) {\n      element.attachEvent(\"on\" + event, handler);\n    }\n  }\n\n  function imageHasData(img) {\n    return !!(img.exifdata);\n  }\n\n\n  function base64ToArrayBuffer(base64, contentType) {\n    contentType = contentType || base64.match(/^data\\:([^\\;]+)\\;base64,/mi)[1] || ''; // e.g. 'data:image/jpeg;base64,...' => 'image/jpeg'\n    base64 = base64.replace(/^data\\:([^\\;]+)\\;base64,/gmi, '');\n    var binary = atob(base64);\n    var len = binary.length;\n    var buffer = new ArrayBuffer(len);\n    var view = new Uint8Array(buffer);\n    for (var i = 0; i < len; i++) {\n      view[i] = binary.charCodeAt(i);\n    }\n    return buffer;\n  }\n\n  function objectURLToBlob(url, callback) {\n    var http = new XMLHttpRequest();\n    http.open(\"GET\", url, true);\n    http.responseType = \"blob\";\n    http.onload = function(e) {\n      if (this.status == 200 || this.status === 0) {\n        callback(this.response);\n      }\n    };\n    http.send();\n  }\n\n  function getImageData(img, callback) {\n    var fileReader = new FileReader();\n    var handleBinaryFile = function handleBinaryFile(binFile) {\n      var data = findEXIFinJPEG(binFile);\n      var iptcdata = findIPTCinJPEG(binFile);\n      img.exifdata = data || {};\n      img.iptcdata = iptcdata || {};\n      if (callback) {\n        callback(img);\n      }\n    };\n\n    if (img.src) {\n      if (/^data\\:/i.test(img.src)) { // Data URI\n        var arrayBuffer = base64ToArrayBuffer(img.src);\n        handleBinaryFile(arrayBuffer);\n\n      } else if (/^blob\\:/i.test(img.src)) { // Object URL\n        fileReader.onload = function(e) {\n          handleBinaryFile(e.target.result);\n        };\n        objectURLToBlob(img.src, function(blob) {\n          fileReader.readAsArrayBuffer(blob);\n        });\n      } else {\n        var http = new XMLHttpRequest();\n        http.onload = function() {\n          if (this.status == 200 || this.status === 0) {\n            handleBinaryFile(http.response);\n          } else {\n            throw \"Could not load image\";\n          }\n          http = null;\n        };\n        http.open(\"GET\", img.src, true);\n        http.responseType = \"arraybuffer\";\n        http.send(null);\n      }\n    } else if (window.FileReader && (img instanceof window.Blob || img instanceof window.File)) {\n      fileReader.onload = function(e) {\n        if (debug) console.log(\"Got file of length \" + e.target.result.byteLength);\n        handleBinaryFile(e.target.result);\n      };\n\n      fileReader.readAsArrayBuffer(img);\n    }\n  }\n\n  function findEXIFinJPEG(file) {\n    var dataView = new DataView(file);\n\n    if (debug) console.log(\"Got file of length \" + file.byteLength);\n    if ((dataView.getUint8(0) != 0xFF) || (dataView.getUint8(1) != 0xD8)) {\n      if (debug) console.log(\"Not a valid JPEG\");\n      return false; // not a valid jpeg\n    }\n\n    var offset = 2,\n      length = file.byteLength,\n      marker;\n\n    while (offset < length) {\n      if (dataView.getUint8(offset) != 0xFF) {\n        if (debug) console.log(\"Not a valid marker at offset \" + offset + \", found: \" + dataView.getUint8(offset));\n        return false; // not a valid marker, something is wrong\n      }\n\n      marker = dataView.getUint8(offset + 1);\n      if (debug) console.log(marker);\n\n      // we could implement handling for other markers here,\n      // but we're only looking for 0xFFE1 for EXIF data\n\n      if (marker == 225) {\n        if (debug) console.log(\"Found 0xFFE1 marker\");\n\n        return readEXIFData(dataView, offset + 4, dataView.getUint16(offset + 2) - 2);\n\n        // offset += 2 + file.getShortAt(offset+2, true);\n\n      } else {\n        offset += 2 + dataView.getUint16(offset + 2);\n      }\n\n    }\n\n  }\n\n  function findIPTCinJPEG(file) {\n    var dataView = new DataView(file);\n\n    if (debug) console.log(\"Got file of length \" + file.byteLength);\n    if ((dataView.getUint8(0) != 0xFF) || (dataView.getUint8(1) != 0xD8)) {\n      if (debug) console.log(\"Not a valid JPEG\");\n      return false; // not a valid jpeg\n    }\n\n    var offset = 2,\n      length = file.byteLength;\n\n\n    var isFieldSegmentStart = function(dataView, offset) {\n      return (\n        dataView.getUint8(offset) === 0x38 &&\n        dataView.getUint8(offset + 1) === 0x42 &&\n        dataView.getUint8(offset + 2) === 0x49 &&\n        dataView.getUint8(offset + 3) === 0x4D &&\n        dataView.getUint8(offset + 4) === 0x04 &&\n        dataView.getUint8(offset + 5) === 0x04\n      );\n    };\n\n    while (offset < length) {\n\n      if (isFieldSegmentStart(dataView, offset)) {\n\n        // Get the length of the name header (which is padded to an even number of bytes)\n        var nameHeaderLength = dataView.getUint8(offset + 7);\n        if (nameHeaderLength % 2 !== 0) nameHeaderLength += 1;\n        // Check for pre photoshop 6 format\n        if (nameHeaderLength === 0) {\n          // Always 4\n          nameHeaderLength = 4;\n        }\n\n        var startOffset = offset + 8 + nameHeaderLength;\n        var sectionLength = dataView.getUint16(offset + 6 + nameHeaderLength);\n\n        return readIPTCData(file, startOffset, sectionLength);\n      }\n\n\n      // Not the marker, continue searching\n      offset++;\n\n    }\n\n  }\n  var IptcFieldMap = {\n    0x78: 'caption',\n    0x6E: 'credit',\n    0x19: 'keywords',\n    0x37: 'dateCreated',\n    0x50: 'byline',\n    0x55: 'bylineTitle',\n    0x7A: 'captionWriter',\n    0x69: 'headline',\n    0x74: 'copyright',\n    0x0F: 'category'\n  };\n\n  function readIPTCData(file, startOffset, sectionLength) {\n    var dataView = new DataView(file);\n    var data = {};\n    var fieldValue, fieldName, dataSize, segmentType, segmentSize;\n    var segmentStartPos = startOffset;\n    while (segmentStartPos < startOffset + sectionLength) {\n      if (dataView.getUint8(segmentStartPos) === 0x1C && dataView.getUint8(segmentStartPos + 1) === 0x02) {\n        segmentType = dataView.getUint8(segmentStartPos + 2);\n        if (segmentType in IptcFieldMap) {\n          dataSize = dataView.getInt16(segmentStartPos + 3);\n          segmentSize = dataSize + 5;\n          fieldName = IptcFieldMap[segmentType];\n          fieldValue = getStringFromDB(dataView, segmentStartPos + 5, dataSize);\n          // Check if we already stored a value with this name\n          if (data.hasOwnProperty(fieldName)) {\n            // Value already stored with this name, create multivalue field\n            if (data[fieldName] instanceof Array) {\n              data[fieldName].push(fieldValue);\n            } else {\n              data[fieldName] = [data[fieldName], fieldValue];\n            }\n          } else {\n            data[fieldName] = fieldValue;\n          }\n        }\n\n      }\n      segmentStartPos++;\n    }\n    return data;\n  }\n\n\n\n  function readTags(file, tiffStart, dirStart, strings, bigEnd) {\n    var entries = file.getUint16(dirStart, !bigEnd),\n      tags = {},\n      entryOffset, tag,\n      i;\n\n    for (i = 0; i < entries; i++) {\n      entryOffset = dirStart + i * 12 + 2;\n      tag = strings[file.getUint16(entryOffset, !bigEnd)];\n      if (!tag && debug) console.log(\"Unknown tag: \" + file.getUint16(entryOffset, !bigEnd));\n      tags[tag] = readTagValue(file, entryOffset, tiffStart, dirStart, bigEnd);\n    }\n    return tags;\n  }\n\n\n  function readTagValue(file, entryOffset, tiffStart, dirStart, bigEnd) {\n    var type = file.getUint16(entryOffset + 2, !bigEnd),\n      numValues = file.getUint32(entryOffset + 4, !bigEnd),\n      valueOffset = file.getUint32(entryOffset + 8, !bigEnd) + tiffStart,\n      offset,\n      vals, val, n,\n      numerator, denominator;\n\n    switch (type) {\n      case 1: // byte, 8-bit unsigned int\n      case 7: // undefined, 8-bit byte, value depending on field\n        if (numValues == 1) {\n          return file.getUint8(entryOffset + 8, !bigEnd);\n        } else {\n          offset = numValues > 4 ? valueOffset : (entryOffset + 8);\n          vals = [];\n          for (n = 0; n < numValues; n++) {\n            vals[n] = file.getUint8(offset + n);\n          }\n          return vals;\n        }\n        break;\n      case 2: // ascii, 8-bit byte\n        offset = numValues > 4 ? valueOffset : (entryOffset + 8);\n        return getStringFromDB(file, offset, numValues - 1);\n\n      case 3: // short, 16 bit int\n        if (numValues == 1) {\n          return file.getUint16(entryOffset + 8, !bigEnd);\n        } else {\n          offset = numValues > 2 ? valueOffset : (entryOffset + 8);\n          vals = [];\n          for (n = 0; n < numValues; n++) {\n            vals[n] = file.getUint16(offset + 2 * n, !bigEnd);\n          }\n          return vals;\n        }\n        break;\n      case 4: // long, 32 bit int\n        if (numValues == 1) {\n          return file.getUint32(entryOffset + 8, !bigEnd);\n        } else {\n          vals = [];\n          for (n = 0; n < numValues; n++) {\n            vals[n] = file.getUint32(valueOffset + 4 * n, !bigEnd);\n          }\n          return vals;\n        }\n        break;\n      case 5: // rational = two long values, first is numerator, second is denominator\n        if (numValues == 1) {\n          numerator = file.getUint32(valueOffset, !bigEnd);\n          denominator = file.getUint32(valueOffset + 4, !bigEnd);\n          val = numerator / denominator;\n          val.numerator = numerator;\n          val.denominator = denominator;\n          return val;\n        } else {\n          vals = [];\n          for (n = 0; n < numValues; n++) {\n            numerator = file.getUint32(valueOffset + 8 * n, !bigEnd);\n            denominator = file.getUint32(valueOffset + 4 + 8 * n, !bigEnd);\n            vals[n] = numerator / denominator;\n            vals[n].numerator = numerator;\n            vals[n].denominator = denominator;\n          }\n          return vals;\n        }\n        break;\n      case 9: // slong, 32 bit signed int\n        if (numValues == 1) {\n          return file.getInt32(entryOffset + 8, !bigEnd);\n        } else {\n          vals = [];\n          for (n = 0; n < numValues; n++) {\n            vals[n] = file.getInt32(valueOffset + 4 * n, !bigEnd);\n          }\n          return vals;\n        }\n        break;\n      case 10: // signed rational, two slongs, first is numerator, second is denominator\n        if (numValues == 1) {\n          return file.getInt32(valueOffset, !bigEnd) / file.getInt32(valueOffset + 4, !bigEnd);\n        } else {\n          vals = [];\n          for (n = 0; n < numValues; n++) {\n            vals[n] = file.getInt32(valueOffset + 8 * n, !bigEnd) / file.getInt32(valueOffset + 4 + 8 * n, !bigEnd);\n          }\n          return vals;\n        }\n    }\n  }\n\n  function getStringFromDB(buffer, start, length) {\n    var outstr = \"\";\n    var n;\n    for (n = start; n < start + length; n++) {\n      outstr += String.fromCharCode(buffer.getUint8(n));\n    }\n    return outstr;\n  }\n\n  function readEXIFData(file, start) {\n    if (getStringFromDB(file, start, 4) != \"Exif\") {\n      if (debug) console.log(\"Not valid EXIF data! \" + getStringFromDB(file, start, 4));\n      return false;\n    }\n\n    var bigEnd,\n      tags, tag,\n      exifData, gpsData,\n      tiffOffset = start + 6;\n\n    // test for TIFF validity and endianness\n    if (file.getUint16(tiffOffset) == 0x4949) {\n      bigEnd = false;\n    } else if (file.getUint16(tiffOffset) == 0x4D4D) {\n      bigEnd = true;\n    } else {\n      if (debug) console.log(\"Not valid TIFF data! (no 0x4949 or 0x4D4D)\");\n      return false;\n    }\n\n    if (file.getUint16(tiffOffset + 2, !bigEnd) != 0x002A) {\n      if (debug) console.log(\"Not valid TIFF data! (no 0x002A)\");\n      return false;\n    }\n\n    var firstIFDOffset = file.getUint32(tiffOffset + 4, !bigEnd);\n\n    if (firstIFDOffset < 0x00000008) {\n      if (debug) console.log(\"Not valid TIFF data! (First offset less than 8)\", file.getUint32(tiffOffset + 4, !bigEnd));\n      return false;\n    }\n\n    tags = readTags(file, tiffOffset, tiffOffset + firstIFDOffset, TiffTags, bigEnd);\n\n    if (tags.ExifIFDPointer) {\n      exifData = readTags(file, tiffOffset, tiffOffset + tags.ExifIFDPointer, ExifTags, bigEnd);\n      for (tag in exifData) {\n        switch (tag) {\n          case \"LightSource\":\n          case \"Flash\":\n          case \"MeteringMode\":\n          case \"ExposureProgram\":\n          case \"SensingMethod\":\n          case \"SceneCaptureType\":\n          case \"SceneType\":\n          case \"CustomRendered\":\n          case \"WhiteBalance\":\n          case \"GainControl\":\n          case \"Contrast\":\n          case \"Saturation\":\n          case \"Sharpness\":\n          case \"SubjectDistanceRange\":\n          case \"FileSource\":\n            exifData[tag] = StringValues[tag][exifData[tag]];\n            break;\n\n          case \"ExifVersion\":\n          case \"FlashpixVersion\":\n            exifData[tag] = String.fromCharCode(exifData[tag][0], exifData[tag][1], exifData[tag][2], exifData[tag][3]);\n            break;\n\n          case \"ComponentsConfiguration\":\n            exifData[tag] =\n              StringValues.Components[exifData[tag][0]] +\n              StringValues.Components[exifData[tag][1]] +\n              StringValues.Components[exifData[tag][2]] +\n              StringValues.Components[exifData[tag][3]];\n            break;\n        }\n        tags[tag] = exifData[tag];\n      }\n    }\n\n    if (tags.GPSInfoIFDPointer) {\n      gpsData = readTags(file, tiffOffset, tiffOffset + tags.GPSInfoIFDPointer, GPSTags, bigEnd);\n      for (tag in gpsData) {\n        switch (tag) {\n          case \"GPSVersionID\":\n            gpsData[tag] = gpsData[tag][0] +\n              \".\" + gpsData[tag][1] +\n              \".\" + gpsData[tag][2] +\n              \".\" + gpsData[tag][3];\n            break;\n        }\n        tags[tag] = gpsData[tag];\n      }\n    }\n\n    return tags;\n  }\n\n  EXIF.getData = function(img, callback) {\n    if ((img instanceof Image || img instanceof HTMLImageElement) && !img.complete) return false;\n    if (!imageHasData(img)) {\n      getImageData(img, callback);\n    } else {\n      if (callback) {\n        callback(img);\n      }\n    }\n    return true;\n  };\n\n  EXIF.getTag = function(img, tag) {\n    if (!imageHasData(img)) return;\n    return img.exifdata[tag];\n  };\n\n  EXIF.getAllTags = function(img) {\n    if (!imageHasData(img)) return {};\n    var a,\n      data = img.exifdata,\n      tags = {};\n    for (a in data) {\n      if (data.hasOwnProperty(a)) {\n        tags[a] = data[a];\n      }\n    }\n    return tags;\n  };\n\n  EXIF.pretty = function(img) {\n    if (!imageHasData(img)) return \"\";\n    var a,\n      data = img.exifdata,\n      strPretty = \"\";\n    for (a in data) {\n      if (data.hasOwnProperty(a)) {\n        if (typeof data[a] == \"object\") {\n          if (data[a] instanceof Number) {\n            strPretty += a + \" : \" + data[a] + \" [\" + data[a].numerator + \"/\" + data[a].denominator + \"]\\r\\n\";\n          } else {\n            strPretty += a + \" : [\" + data[a].length + \" values]\\r\\n\";\n          }\n        } else {\n          strPretty += a + \" : \" + data[a] + \"\\r\\n\";\n        }\n      }\n    }\n    return strPretty;\n  };\n\n  EXIF.readFromBinaryFile = function(file) {\n    return findEXIFinJPEG(file);\n  };\n\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n      return EXIF;\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  }\n}.call(this));\n\n\n//# sourceURL=webpack:///./src/js/exif.js?");

/***/ }),

/***/ "./src/js/index.js":
/*!*************************!*\
  !*** ./src/js/index.js ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst app = __webpack_require__(/*! ./app */ \"./src/js/app.js\");\nconst BR = __webpack_require__(/*! ./BarcodeReader */ \"./src/js/BarcodeReader.js\");\n\n// TODO jquery\n// BarcodeReader class\nlet showPicture; // TODO in class\n\nconst svgShow = (id) => {\n    $('#'+id).show();\n};\n\nconst svgHide = (id) => {\n    $('#'+id).hide();\n};\n\nconst showBarcodeLoading = () => {\n    $('.barcode-container .menu-container .loading').show();\n};\n\nconst hideBarcodeLoading = () => {\n    $('.barcode-container .menu-container .loading').hide();\n};\n\nconst addButtons = (keywords) => {\n    for (let i=0; i<keywords.length; i++) {\n        const buttonStr = '<button type=\"button\" id=\"keywords'+i+'\" class=\"btn btn-primary key-button active\" data-toggle=\"button\" aria-pressed=\"false\" autocomplete=\"off\">'+keywords[i]+'</button>';\n        const b = $(buttonStr);\n        $('.keywords-container').append(b);\n    }\n};\n\nconst getSelectedKeywords = () => {\n    let ret = [];\n    for (let c of $('.keywords-container').children()) {\n        const e = $(c);\n        //console.log(e);\n        if (e.hasClass('active')) {\n            //console.log(e.text()+'is selected');\n            ret.push(e.text());\n        } else {\n            //console.log(e.text()+'is not selected');\n        }\n    }\n    return ret;\n};\n\nconst getQuery = (keywords, s) => {\n    let q='';\n    for (let w of keywords) {\n        q += w+s;\n    }\n    q = q.slice(0,-1*s.length);\n    return q;\n};\n\nconst getGoogleUrl = (keywords) => {\n    const url='https://www.google.co.jp/search?q='+getQuery(keywords, '+');\n    return url;\n};\n\nconst getAmazonUrl = (keywords) => {\n    const url='https://www.amazon.co.jp/s?field-keywords='+encodeURI(getQuery(keywords, '+'));\n    return url;\n};\n\nconst getRakutenUrl = (keywords) => {\n    const url='https://search.rakuten.co.jp/search/mall/'+getQuery(keywords, '+')+'/';\n    return url;\n};\n\nconst getYahooShoppingUrl = (keywords) => {\n    const url='https://search.shopping.yahoo.co.jp/search?p='+getQuery(keywords, '+');\n    return url;\n};\n\nconst getSevenNetUrl = (keywords) => {\n    const url='https://7net.omni7.jp/search/?keyword='+getQuery(keywords, '+');\n    return url;\n};\n\nconst getMercariUrl = (keywords) => {\n    const url='https://www.mercari.com/jp/search/?keyword='+getQuery(keywords, '+');\n    return url;\n};\n\nconst getRakumaUrl = (keywords) => {\n    const url='https://fril.jp/search/'+getQuery(keywords, '%20');\n    return url;\n};\n\nconst getYahooAuctionsUrl = (keywords) => {\n    const url='https://auctions.yahoo.co.jp/search/search?p='+getQuery(keywords, '+');\n    return url;\n};\n\nconst addSearchLink = (id, url) => {\n    $('.dropdown-item#'+id).attr('href', url);\n    // console.log(url);\n};\n\nconst createSearchLink = (keywords) => {\n    if (keywords.length === 0) return;\n\n    addSearchLink('google', getGoogleUrl(keywords));\n    addSearchLink('amazon', getAmazonUrl(keywords));\n    addSearchLink('rakuten', getRakutenUrl(keywords));\n    addSearchLink('yahooshopping', getYahooShoppingUrl(keywords));\n    addSearchLink('sevennet', getSevenNetUrl(keywords));\n    addSearchLink('mercari', getMercariUrl(keywords));\n    addSearchLink('rakuma', getRakumaUrl(keywords));\n    addSearchLink('yahooauctions', getYahooAuctionsUrl(keywords));\n\n};\n\nconst clearButtons = () => {\n    $('.keywords-container').empty();\n};\n\nconst setLoading = () => {\n    const loading = $('<div class=\"loading\"></div>');\n    $('.keywords-container').append(loading);\n};\n\nconst clearLoading = () => {\n    $('.keywords-container').empty();\n};\n\nconst sendRequest = (searchJan) => {\n    clearButtons();\n    setLoading();\n    //$('#janResult').text('loading');\n    $.ajax({\n        type: 'GET',\n        url: 'https://script.google.com/macros/s/AKfycbzquZl9csXdZvehTLnUWWfdv_wf5Qbis4h53QFBGm-duR2gg3yd/exec',\n        data: {\n            jan: searchJan,\n        },\n        dataType: 'jsonp',\n        jsonp: 'callback',\n        crossDomain: true,\n    }).done( (data) => {\n        // console.log(data);\n        clearLoading();\n        addButtons(data);\n        //$('#janResult').text('success');\n    }).fail( (data) => {\n        //$('#janResult').text('fail');\n    }); // TODO always?\n};\n\nconst barcodeInit = () => {\n    // var Result = document.querySelector('#textbit');\n    const canvas =document.getElementById('picture');\n    const ctx = canvas.getContext('2d');\n    BR.BarcodeReader.Init();\n    BR.BarcodeReader.SetImageCallback(function(result) {\n        hideBarcodeLoading();\n        if(result.length > 0){\n            const jan = result[0].Value;\n            // console.log(`jan:${jan}`)\n            svgShow('outline-check');\n            sendRequest(jan);\n        } else {\n            svgShow('outline-cancel');\n            // console.log('barcode failed')\n        }\n        // if(result.length > 0){\n\t//     var tempArray = [];\n\t//     for(var i = 0; i < result.length; i++) {\n\t//         tempArray.push(result[i].Format+' : '+result[i].Value);\n\t//     }\n\t//     Result.innerHTML=tempArray.join('<br />');\n        // }else{\n\t//     if(result.length === 0) {\n\t//         Result.innerHTML='Decoding failed.';\n\t//     }\n        // }\n    });\n    BR.BarcodeReader.PostOrientation = true;\n    BR.BarcodeReader.OrientationCallback = function(result) {\n        // canvas.width = result.width;\n        // canvas.height = result.height;\n        // const data = ctx.getImageData(0,0,canvas.width,canvas.height);\n        const data = ctx.getImageData(0,0,result.width,result.height);\n        for(let i = 0; i < data.data.length; i++) {\n\t    data.data[i] = result.data[i];\n        }\n        ctx.putImageData(data,0,0);\n    };\n    BR.BarcodeReader.SwitchLocalizationFeedback(true);\n    BR.BarcodeReader.SetLocalizationCallback(function(result) {\n        ctx.beginPath();\n        ctx.lineWIdth = '2';\n        ctx.strokeStyle='red';\n        for(let i = 0; i < result.length; i++) {\n\t    ctx.rect(result[i].x,result[i].y,result[i].width,result[i].height); \n        }\n        ctx.stroke();\n    });\n};\n\nconst uploadFile = (file) => {\n    if (file) {\n        let reader = new FileReader();\n        try {\n            showBarcodeLoading();\n            clearButtons();\n            svgHide('outline-check');\n            svgHide('outline-cancel');\n            reader.onload = function (e) {\n\t        showPicture.onload = function(event) {\n\t\t    //Result.innerHTML='';\n\t\t    BR.BarcodeReader.DecodeImage(showPicture);\n\t        };\n\t        showPicture.src = e.target.result;\n            }\n            reader.readAsDataURL(file);\n\t}\n\tcatch (e) {\n\t    Result.innerHTML = 'Neither createObjectURL or FileReader are supported';\n\t}\n    }\n};\n\nconst defaultSvgAttr = (svgId, gId) => {\n    $(svgId)\n        .on({\n            'mouseover': function() {\n                $(gId).attr('fill','#141414');\n            },\n            'mouseout': function() {\n                $(gId).attr('fill','#747474');\n            }\n        });\n};\n\n(() => {\n    showPicture = document.createElement('img'); // TODO\n    \n    defaultSvgAttr('#outline-insert-photo', '#outline-insert-photo-line');\n    $('#outline-insert-photo').on({\n        'click': function() {\n            $('#uploadFileElem').click();\n        }\n    });\n    $('#uploadFileElem').change(function() { uploadFile($(this).prop('files')[0]); }); // TODO\n\n    $('.dropdown-item').on({\n        'click': function(e) {\n            if (getSelectedKeywords().length === 0) {\n                e.preventDefault();\n                return;\n            }\n        }\n    });\n\n    $('#dropdownMenuLink').on({\n        'click': function(e) {\n            // console.log('search click');\n            createSearchLink(getSelectedKeywords());\n        }\n    });\n    // $('#outline-search').on({\n    //     'click': function(e) {\n    //         console.log('search click');\n    //         createSearchLink(getSelectedKeywords());\n    //     }\n    // });\n    //createSearchLink(['AAA','文字']);\n    //$('.dropdown-toggle').dropdown('toggle');\n\n})();\n\n(() => {\n    barcodeInit();\n    \n    // var takePicture = document.querySelector('#takePicture');\n    // if(takePicture && showPicture) {\n    //     takePicture.onchange = function (event) {\n    //         var files = event.target.files;\n    //         if (files && files.length > 0) {\n    //             var file = files[0];\n    //             try {\n    //     \t    var URL = window.URL || window.webkitURL;\n    //     \t    showPicture.onload = function(event) {\n    //     \t        Result.innerHTML='';\n    //     \t        BR.BarcodeReader.DecodeImage(showPicture);\n    //     \t        URL.revokeObjectURL(showPicture.src);\n    //     \t    };\n    //     \t    showPicture.src = URL.createObjectURL(file);\n    //             }\n    //             catch (e) {\n    //             }\n    //         }\n    //     };\n    // }\n})();\n\n(() => {\n    if ('serviceWorker' in navigator) {\n\tnavigator.serviceWorker\n            .register('./sw.js');\n    }\n})();\n\n\n//# sourceURL=webpack:///./src/js/index.js?");

/***/ })

/******/ });